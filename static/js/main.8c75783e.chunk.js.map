{"version":3,"sources":["components/HeaderSearchResults/index.js","components/Header/index.js","utils/API.js","components/Footer/index.js","components/PostCard/index.js","components/PreLoader/index.js","pages/Home/index.js","pages/Login/index.js","components/NewPostModal/index.js","pages/ProfilePage/index.js","pages/EditProfile/index.js","pages/Post/index.js","pages/Search/index.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderSearchResults","props","history","useHistory","className","show","icon","faSpinnerThird","isLoading","results","map","user","src","profilePicture","alt","onClick","push","username","Header","searchInput","useLocation","useRef","searchInputWrapper","searchInputAndResultsWrapper","useState","isFocusedOnSearch","setIsFocusedOnSearch","searchResults","setSearchResults","showSearchResults","setShowSearchResults","isGettingSearchResults","setIsGettingSearchResults","loggedInUsername","setLoggedInUsername","useEffect","API","validateUserLoggedIn","then","response","handleTokenInfo","data","catch","err","document","addEventListener","e","target","current","contains","to","isLoginPage","ref","onSubmit","preventDefault","query","value","getSearchResults","console","log","finally","placeholder","aria-label","onFocus","onBlur","faSearch","setShow","solidSearch","faHomeLgAlt","faUser","API_ENDPOINT","process","updatePostLikeStatus","postId","userLikedPost","axios","put","id","getUser","profilePageUsername","visitingUser","get","setHeaderToken","getUserPosts","createUser","userObj","post","userLogin","userUpdate","localStorage","getItem","followUser","userToFollowId","unfollowUser","userToUnfollowId","getPost","createPost","deletePost","delete","getHomePagePosts","a","token","uploadToCloudinary","img","file","upload_preset","uploadProfilePic","likePost","unlikePost","Footer","PostCard","hasLiked","postIsLiked","setPostIsLiked","userIsCreator","setUserIsCreator","isUpdatingLikeStatus","loggedInUser","_id","handleLikeBtnClick","useCallback","status","alert","handlePostDelete","faTrashAlt","isPostPage","solidHeart","lightHeart","likes","caption","PreLoader","preloader","classList","add","setTimeout","Home","isPageLoaded","setIsPageLoaded","posts","setPosts","likedBy","includes","creator","Login","isLoggingIn","setIsLogginIn","loadingLogin","setLoadingLogin","loadingSignUp","setLoadingSignUp","loginHelperText","setLoginHelperText","signUpHelperText","setSignUpHelperText","email","helperText","password","loginInputValues","setLoginInputValues","name","passwordReEnter","signUpInputValues","setSignUpInputValues","toggleFormToDisplay","handleLoginInputChange","handleSignupInputChange","handleLoginAttempt","checkForEmptyField","headers","setItem","handleSignUpAttempt","inputsObj","setHelperTextFunc","inputNames","Object","keys","i","length","inputName","inputValue","inputHelperText","handleLoginInfo","type","onChange","disabled","NewPostModal","imageUploadSvg","isPosting","setIsPosting","setHelperText","imgToPost","setImgToPost","captionTextarea","captionCount","setCaptionCount","fileInput","handlePostBtnClick","url","go","updateCaptionCharCount","captionText","querySelector","style","opacity","click","data-name","xmlns","viewBox","x","y","width","height","rx","maxLength","selectedFile","files","reader","FileReader","onload","event","result","readAsDataURL","Profilepage","location","useParams","lastProfilePage","profileImg","bio","followersCount","followingCount","setUser","isFollowing","setIsFollowing","isUnfollowing","setIsUnfollowing","currentUserIsSameAsProfile","setCurrentUserIsSameAsProfile","isFollowingUser","setIsFollowingUser","showNewPostModal","setShowNewPostModal","handleNewPostBtnClick","logout","removeItem","class","cx","cy","r","x1","y1","x2","y2","index","number","col","EditProfile","fileInputEle","displayUsername","setDisplayUsername","userHasChangedProfilePic","isUpdating","setIsUpdating","handleInputChange","handleFormSubmit","updateUserDB","for","Post","setPost","setLoggedInUser","Search","setQuery","setIsLoading","setResults","search","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8c75783e.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSpinnerThird } from '@fortawesome/pro-solid-svg-icons'\r\nimport './index.css'\r\n\r\nexport default function HeaderSearchResults(props) {\r\n    let history = useHistory();\r\n\r\n    return (\r\n        <div className={`header-search-results-wrapper${props.show ? '' : ' hide'}`}>\r\n            <FontAwesomeIcon \r\n                icon={faSpinnerThird} \r\n                className={`search-results-spinner${props.isLoading ? '' : ' hide'}`}/>\r\n            {props.results.map(user => {\r\n                return (\r\n                    <div className='search-result'>\r\n                        <div className='profile-img'>\r\n                            <img\r\n                                src={user.profilePicture || 'https://i.imgur.com/dCc7ake.png'}\r\n                                alt='user profile picture'\r\n                                onClick={() => history.push('/user/' + user.username)}/>\r\n                        </div>\r\n                        <p \r\n                            className='username'\r\n                            onClick={() => history.push('/user/' + user.username)}\r\n                            >{user.username}</p>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useRef, useState, useCallback } from 'react'\r\nimport { Link, useHistory, useLocation } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPaperPlane, faUser } from '@fortawesome/free-solid-svg-icons'\r\nimport { faHomeLgAlt, faSearch as solidSearch } from '@fortawesome/pro-solid-svg-icons'\r\nimport { faSearch } from '@fortawesome/pro-regular-svg-icons'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\nimport HeaderSearchResults from '../HeaderSearchResults'\r\n\r\nexport default function Header(props) {\r\n    let history = useHistory();\r\n    let location = useLocation();\r\n\r\n    const searchInput = useRef()\r\n    const searchInputWrapper = useRef()\r\n    const searchInputAndResultsWrapper = useRef();\r\n\r\n    const [isFocusedOnSearch, setIsFocusedOnSearch] = useState(false)\r\n\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const [showSearchResults, setShowSearchResults] = useState(false)\r\n    const [isGettingSearchResults, setIsGettingSearchResults] = useState(false)\r\n\r\n    const [loggedInUsername, setLoggedInUsername] = useState(null)\r\n\r\n    useEffect(() => {\r\n        // on page load, validate that user is logged in\r\n        API.validateUserLoggedIn()\r\n            .then(response => {\r\n                // if response is false, no token was found in storage so redirect to login\r\n                if (!response) {\r\n                    return history.push('/login')\r\n                } else {\r\n                    // else send user info to handler function for page if function exists\r\n                    if (props.handleTokenInfo) {\r\n                        props.handleTokenInfo(response.data)\r\n                    }\r\n                    // update state with user's username\r\n                    setLoggedInUsername(response.data.username)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                // if token could not be validated, send user to login page\r\n                history.push('/login')\r\n            })\r\n\r\n        // create click event listener to hide results when user click off of results ele\r\n        document.addEventListener('click', e => {\r\n            const target = e.target\r\n\r\n            // if target isn't part of search bar/results, update state to hide search results\r\n            if (searchInputAndResultsWrapper.current && !searchInputAndResultsWrapper.current.contains(target)) {\r\n                setShowSearchResults(false)\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const handleSearchFormSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        const query = searchInput.current.value;\r\n\r\n        // update state to show loading spinner while getting results\r\n        setIsGettingSearchResults(true)\r\n        setShowSearchResults(true);\r\n\r\n        // get results from server\r\n        API.getSearchResults(query).\r\n            then(response => {\r\n                console.log(response)\r\n                // update state with search results\r\n                setSearchResults(response.data)\r\n            }).\r\n            catch(err => {\r\n                console.log(err.response)\r\n            }).\r\n            finally(() => {\r\n                setIsGettingSearchResults(false)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <div className='header-flex'>\r\n                <div className='flex-item-group'>\r\n                    <Link to='/' className='brand'><h1>Title</h1></Link>\r\n                </div>\r\n                <div\r\n                    className={`flex-item-group search${props.isLoginPage ? ' hide' : ''}`}\r\n                    ref={searchInputAndResultsWrapper}>\r\n                    <form ref={searchInputWrapper}\r\n                        className={`header-search-wrapper${isFocusedOnSearch ? ' focused' : ''}${showSearchResults ? ' hide-bottom-border' : ''}`}\r\n                        onSubmit={handleSearchFormSubmit}\r\n                    >\r\n                        <input ref={searchInput}\r\n                            className='search-bar'\r\n                            placeholder='search'\r\n                            aria-label='search bar'\r\n                            onFocus={() => setIsFocusedOnSearch(true)}\r\n                            onBlur={() => setIsFocusedOnSearch(false)}\r\n                        />\r\n                        <button className='search-icon-btn' aria-label='search'>\r\n                            <FontAwesomeIcon icon={faSearch} />\r\n                        </button>\r\n                    </form>\r\n                    <HeaderSearchResults\r\n                        results={searchResults}\r\n                        show={showSearchResults}\r\n                        setShow={setShowSearchResults}\r\n                        isLoading={isGettingSearchResults} />\r\n                </div>\r\n                <div className={`flex-item-group link-icons${props.isLoginPage ? ' hide' : ''}`}>\r\n                    <Link to='/search' aria-label='search' className='nav-link search'>\r\n                        <FontAwesomeIcon icon={solidSearch} />\r\n                    </Link>\r\n                    <Link to='/' aria-label='home' className='nav-link'>\r\n                        <FontAwesomeIcon icon={faHomeLgAlt} />\r\n                    </Link>\r\n                    {/* <Link to='#' aria-label='messages' className='nav-link messages'>\r\n                        <FontAwesomeIcon icon={faPaperPlane} />\r\n                    </Link> */}\r\n                    <Link\r\n                        aria-label='profile page' \r\n                        className='nav-link' \r\n                        // onClick={handleUserIconClick}\r\n                        to={loggedInUsername ? `/user/${loggedInUsername}` : '/login'}>\r\n                        <FontAwesomeIcon icon={faUser} />\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import axios from 'axios'\r\nimport Header from '../components/Header'\r\n\r\nconst API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || 'http://localhost:8000'\r\n// const API_ENDPOINT = 'http://localhost:8000'\r\n\r\nexport default {\r\n    updatePostLikeStatus: function(postId, userLikedPost) {\r\n        return axios.put(`${API_ENDPOINT}/api/post/status/likes`, { id: postId, userLikedPost: userLikedPost })\r\n    },\r\n    getUser: function(profilePageUsername, visitingUser) {\r\n        return axios.get(`${API_ENDPOINT}/api/user/${profilePageUsername}`, setHeaderToken())\r\n    },\r\n    getUserPosts: function(id) {\r\n        return axios.get(`${API_ENDPOINT}/api/user/${id}/posts`)\r\n    },\r\n    createUser: function(userObj) {\r\n        return axios.post(`${API_ENDPOINT}/api/user/create`, userObj)\r\n    },\r\n    userLogin: function(userObj) {\r\n        return axios.post(`${API_ENDPOINT}/api/user/login`, userObj)\r\n    },\r\n    userUpdate: function(user) {\r\n        return axios.put(`${API_ENDPOINT}/api/user/update`, user, { 'headers': { 'auth-token': localStorage.getItem('accessToken') } })\r\n    },\r\n    followUser: function(userToFollowId) {\r\n        return axios.put(`${API_ENDPOINT}/api/user/${userToFollowId}/follow`, null, setHeaderToken())\r\n    },\r\n    unfollowUser: function(userToUnfollowId) {\r\n        return axios.put(`${API_ENDPOINT}/api/user/${userToUnfollowId}/unfollow`, null, setHeaderToken())\r\n    },\r\n    getPost: function(id) {\r\n        return axios.get(`${API_ENDPOINT}/api/post/${id}`, setHeaderToken())\r\n    },\r\n    createPost: function(post) {\r\n        return axios.post(`${API_ENDPOINT}/api/post/create`, post, { 'headers': { 'auth-token': localStorage.getItem('accessToken') } })\r\n    },\r\n    deletePost: function(id) {\r\n        return axios.delete(`${API_ENDPOINT}/api/post/${id}/delete`, setHeaderToken())\r\n    },\r\n    getHomePagePosts: function() {\r\n        return axios.get(`${API_ENDPOINT}/api/posts/following`, { 'headers': { 'auth-token': localStorage.getItem('accessToken') } })\r\n    },\r\n    getSearchResults: function(query) {\r\n        return axios.get(`${API_ENDPOINT}/api/user/search/${query}`)\r\n    },\r\n    validateUserLoggedIn: async function() {\r\n        // get jwt from local storage\r\n        const token = localStorage.getItem('accessToken')\r\n\r\n        // if no token found, return false\r\n        if (!token) return false\r\n\r\n        // make request to server to validate that token is still valid\r\n        return axios.get(`${API_ENDPOINT}/api/auth/token`, { 'headers': { 'auth-token': token } })\r\n    },\r\n    uploadToCloudinary: function(img) {\r\n        return axios.post('https://api.cloudinary.com/v1_1/dka83rgpq/image/upload', { file: img, upload_preset: 'ienclaiw' })\r\n    },\r\n    uploadProfilePic: function(img) {\r\n        return axios.post('https://api.cloudinary.com/v1_1/dka83rgpq/image/upload', { file: img, upload_preset: 'social-profile' })\r\n    },\r\n    likePost: function(postId) {\r\n        return axios.put(`${API_ENDPOINT}/api/post/${postId}/like`, null, setHeaderToken())\r\n    },\r\n    unlikePost: function(postId) {\r\n        return axios.put(`${API_ENDPOINT}/api/post/${postId}/unlike`, null, setHeaderToken())\r\n    }\r\n}\r\n\r\n// function that returns obj for header in api request with jwt\r\nfunction setHeaderToken() {\r\n    // get token from storage\r\n    const token = localStorage.getItem('accessToken')\r\n\r\n    const headerObj = {\r\n        'headers': {\r\n            'auth-token': token\r\n        }\r\n    }\r\n\r\n    return headerObj\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Link, useHistory, useLocation } from 'react-router-dom'\r\nimport './index.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPaperPlane, faUser } from '@fortawesome/free-solid-svg-icons'\r\nimport { faHomeLgAlt, faSearch as solidSearch } from '@fortawesome/pro-solid-svg-icons'\r\nimport API from '../../utils/API'\r\n\r\nexport default function Footer(props) {\r\n    let history = useHistory();\r\n\r\n    // usernames to be used for checking when user is trying to leave one profile page to visit another\r\n    const [profilePageUsername, setProfilePageUsername] = useState()\r\n\r\n    const [loggedInUsername, setLoggedInUsername] = useState(null)\r\n\r\n    useEffect(() => {\r\n        // get user info by validating their jwt in storage, which returns their username\r\n        API.validateUserLoggedIn()\r\n            .then(response => {\r\n                const username = response.data.username\r\n                setLoggedInUsername(username)\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <footer>\r\n            <Link to='/search' aria-label='search' className='footer-nav-link'>\r\n                <FontAwesomeIcon icon={solidSearch} />\r\n            </Link>\r\n            <Link to='/' aria-label='home' className='footer-nav-link'>\r\n                <FontAwesomeIcon icon={faHomeLgAlt} />\r\n            </Link>\r\n            <Link\r\n                aria-label='Profile page'\r\n                className='footer-nav-link'\r\n                to={loggedInUsername ? `/user/${loggedInUsername}` : '/login'}>\r\n                <FontAwesomeIcon icon={faUser} />\r\n            </Link>\r\n        </footer>\r\n    )\r\n}\r\n","import React, { useState, useCallback, useEffect, useRef } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHeart as solidHeart } from '@fortawesome/free-solid-svg-icons'\r\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\n// import { faHomeLgAlt } from '@fortawesome/pro-solid-svg-icons'\r\nimport { faHeart as lightHeart } from '@fortawesome/pro-regular-svg-icons'\r\nimport './index.css'\r\nimport API from '../../utils/API'\r\n\r\nexport default function PostCard(props) {\r\n    let history = useHistory();\r\n\r\n    const [postIsLiked, setPostIsLiked] = useState(props.post.hasLiked)\r\n    const [userIsCreator, setUserIsCreator] = useState(false)\r\n    const isUpdatingLikeStatus = useRef(false)\r\n\r\n    useEffect(() => {\r\n        // when logged in user state is updated, update state\r\n        setUserIsCreator(props.loggedInUser && props.loggedInUser.id === props.user._id)\r\n    }, [props.loggedInUser])\r\n\r\n    // update status for post being liked by user when user clicks like button\r\n    const handleLikeBtnClick = useCallback((e) => {\r\n        // if status is currently being updated on server, don't allow user to change status now\r\n        if (isUpdatingLikeStatus.current) return\r\n\r\n        // update like status in state\r\n        setPostIsLiked(!postIsLiked)\r\n        isUpdatingLikeStatus.current = true\r\n\r\n        // if user is liking a post, notify server\r\n        if (!postIsLiked) {\r\n            API.likePost(props.post._id).\r\n                then(response => {\r\n                    console.log(response)\r\n                }).\r\n                catch(err => {\r\n                    console.log(err.response)\r\n                    if (err.response && err.response.status) {\r\n                        switch (err.response.status) {\r\n                            case 500:\r\n                                // 500: error occurred with mongoose while updating\r\n                                // set like status to it's previous\r\n                                setPostIsLiked(!postIsLiked)\r\n                                break;\r\n                            case 401:\r\n                            case 403:\r\n                                // token was no longer valid, send user to login page\r\n                                alert('Your session has timed out')\r\n                                history.push('/login')\r\n                                break\r\n                        }\r\n                    }\r\n                }).\r\n                finally(() => {\r\n                    // allow user to change like status again\r\n                    isUpdatingLikeStatus.current = false\r\n                })\r\n        } else {\r\n            // else tell server to unlike the post\r\n            API.unlikePost(props.post._id).\r\n                then(response => {\r\n                    console.log(response)\r\n                }).\r\n                catch(err => {\r\n                    console.log(err.response)\r\n                    if (err.response.status) {\r\n                        switch (err.response.status) {\r\n                            case 500:\r\n                                // 500: error occurred with mongoose while updating\r\n                                // set like status to it's previous\r\n                                setPostIsLiked(!postIsLiked)\r\n                                break;\r\n                            case 401:\r\n                            case 403:\r\n                                // token was no longer valid, send user to login page\r\n                                alert(\"Your session has timed out\")\r\n                                history.push('/login')\r\n                                break\r\n                        }\r\n                    }\r\n                }).\r\n                finally(() => {\r\n                    // allow user to change like status again\r\n                    isUpdatingLikeStatus.current = false\r\n                })\r\n        }\r\n    }, [postIsLiked])\r\n\r\n    const handlePostDelete = useCallback(() => {\r\n        // tell server to delete post\r\n        API.deletePost(props.post._id).\r\n            then(response => {\r\n                // send user back to their profile page\r\n                history.push(`/user/${props.loggedInUser.username}`)\r\n            }).\r\n            catch(err => {\r\n                console.log(err.response)\r\n            })\r\n    }, [props.loggedInUser])\r\n\r\n    return (\r\n        <div className='post-card'>\r\n            <div className='user-info'>\r\n                <div className='profile-img-wrapper'>\r\n                    <img src={props.user.profilePicture || 'https://i.imgur.com/dCc7ake.png'} alt='User profile picture' />\r\n                </div>\r\n                <Link to={`/user/${props.user.username}`} className='username'>{props.user.username}</Link>\r\n                <FontAwesomeIcon \r\n                    icon={faTrashAlt} \r\n                    className={`post-delete-icon${props.isPostPage && userIsCreator ? '' : ' hide'}`}\r\n                    onClick={handlePostDelete}/>\r\n            </div>\r\n            <div className='post-content'>\r\n                <div className='post-img-wrapper'>\r\n                    <img src={props.post.img} alt='post image' />\r\n                </div>\r\n                <div className='post-details'>\r\n                    <div className='likes-wrapper'>\r\n                        <FontAwesomeIcon\r\n                            icon={postIsLiked ? solidHeart : lightHeart}\r\n                            className={`heart-icon${postIsLiked ? ' liked' : ''}`}\r\n                            onClick={() => handleLikeBtnClick(props.post.id)}\r\n                        />\r\n                        <p className='likes-number'>{props.post.likes}</p>\r\n                    </div>\r\n                    <div className='caption-wrapper'>\r\n                        {props.post.caption}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useRef, useEffect } from 'react'\r\nimport './index.css'\r\n\r\nexport default function PreLoader(props) {\r\n    const preloader = useRef()\r\n\r\n    // when page is loaded, wait 2s for preloader to fade, then set it's display to none\r\n    useEffect(() => {\r\n        if (props.show === false) {\r\n            preloader.current.classList.add('fade')\r\n            setTimeout(() => {\r\n                preloader.current.classList.add('hide')\r\n            }, 2000)\r\n        }\r\n    }, [props.show])\r\n\r\n    return (\r\n        <div ref={preloader} className='preloader'>\r\n            <div className='loading-circles'>\r\n                <div className='circle one'></div>\r\n                <div className='circle two'></div>\r\n                <div className='circle three'></div>\r\n                <div className='circle four'></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Footer from '../../components/Footer'\r\nimport Header from '../../components/Header'\r\nimport PostCard from '../../components/PostCard'\r\nimport PreLoader from '../../components/PreLoader'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\n\r\nexport default function Home() {\r\n    let history = useHistory();\r\n\r\n    const [isPageLoaded, setIsPageLoaded] = useState(false)\r\n    const [posts, setPosts] = useState([])\r\n\r\n    useEffect(() => {\r\n        // get all recent posts of people the user followers\r\n        API.getHomePagePosts()\r\n            .then(response => {\r\n                // iterate over array of posts\r\n                for (let post of response.data.posts) {\r\n                    // if user has liked the post, set hasLiked to true\r\n                    if (post.likedBy.includes(response.data.user.id)) {\r\n                        post.hasLiked = true\r\n                    } else {\r\n                        // set hasLiked to false\r\n                        post.hasLiked = false\r\n                    }\r\n                }\r\n                // set array of posts to state\r\n                setPosts(response.data.posts)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            }).\r\n            finally(() => {\r\n                console.log('page is loaded')\r\n                setIsPageLoaded(true)\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n        <PreLoader show={!isPageLoaded}/>\r\n        <div className='home-page-wrapper'>\r\n            <Header />\r\n            <div className='content-header-footer-offset'>\r\n                <div className='content-main-responsive'>\r\n                    {posts.map(post => {\r\n                        return (\r\n                            <PostCard\r\n                                user={post.creator}\r\n                                post={post} />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useCallback } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSpinnerThird } from '@fortawesome/pro-regular-svg-icons'\r\nimport './index.css'\r\nimport API from '../../utils/API';\r\nimport Header from '../../components/Header'\r\nimport PreLoader from '../../components/PreLoader'\r\n\r\nexport default function Login() {\r\n    let history = useHistory();\r\n\r\n    const [isPageLoaded, setIsPageLoaded] = useState(false)\r\n\r\n    // state controls which form to display\r\n    const [isLoggingIn, setIsLogginIn] = useState(false);\r\n\r\n    const [loadingLogin, setLoadingLogin] = useState(false);\r\n    const [loadingSignUp, setLoadingSignUp] = useState(false)\r\n\r\n    const [loginHelperText, setLoginHelperText] = useState('')\r\n    const [signUpHelperText, setSignUpHelperText] = useState('')\r\n\r\n    const [loginInputValues, setLoginInputValues] = useState({\r\n        email: {\r\n            value: '',\r\n            helperText: 'Please enter an email'\r\n        },\r\n        password: {\r\n            value: '',\r\n            helperText: \"Please enter a password\"\r\n        }\r\n    })\r\n\r\n    const [signUpInputValues, setSignUpInputValues] = useState({\r\n        email: {\r\n            value: '',\r\n            helperText: 'Please enter an email'\r\n        },\r\n        username: {\r\n            value: '',\r\n            helperText: 'Please enter a username'\r\n        },\r\n        name: {\r\n            value: '',\r\n            helperText: 'Please enter your name'\r\n        },\r\n        password: {\r\n            value: '',\r\n            helperText: 'Please enter a password'\r\n        },\r\n        passwordReEnter: {\r\n            value: '',\r\n            helperText: \"Please re-enter your password\"\r\n        }\r\n    })\r\n\r\n    const toggleFormToDisplay = () => {\r\n        // update state to opposite boolean\r\n        setIsLogginIn(!isLoggingIn)\r\n    }\r\n\r\n    const handleLoginInputChange = e => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n        // update state with new value\r\n        setLoginInputValues({ ...loginInputValues, [name]: { ...loginInputValues[name], value: value } })\r\n    }\r\n\r\n    const handleSignupInputChange = e => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n\r\n        // update state with new input value\r\n        setSignUpInputValues({ ...signUpInputValues, [name]: { ...signUpInputValues[name], value: value } })\r\n    }\r\n\r\n    const handleLoginAttempt = useCallback(e => {\r\n        e.preventDefault();\r\n        // remove any helper text from state\r\n        setLoginHelperText('')\r\n\r\n        // if a field is blank, tell user to fill out field before loggin in\r\n        const allInputsFilled = checkForEmptyField({ ...loginInputValues }, setLoginHelperText)\r\n        if (!allInputsFilled) return\r\n\r\n        const userObj = {\r\n            email: loginInputValues.email.value,\r\n            password: loginInputValues.password.value\r\n        }\r\n\r\n        // disable login button\r\n        setLoadingLogin(true)\r\n\r\n        API.userLogin(userObj)\r\n            .then(response => {\r\n                // get access token (jwt) and user id from response\r\n                const userId = response.data.id\r\n                const username = response.data.username\r\n                const token = response.headers['auth-token']\r\n                // store token in storage\r\n                localStorage.setItem('accessToken', token);\r\n\r\n                // redirect user to their profile page\r\n                history.push(`/user/${username}`)\r\n            })\r\n            .catch(err => {\r\n                switch (err.response.status) {\r\n                    case 401:\r\n                        // 401 for incorrect email or password\r\n                        setLoginHelperText(\"Incorrect email or password\")\r\n                        break\r\n                }\r\n            })\r\n            .finally(() => {\r\n                setLoadingLogin(false)\r\n            })\r\n    }, [loginInputValues])\r\n\r\n    const handleSignUpAttempt = useCallback((e) => {\r\n        setSignUpHelperText('')\r\n\r\n        e.preventDefault();\r\n        // if a field is blank, tell user to fill out field before registering\r\n        const allInputsFilled = checkForEmptyField({ ...signUpInputValues }, setSignUpHelperText)\r\n        if (!allInputsFilled) return\r\n\r\n        // check if password and re-entered password match\r\n        if (signUpInputValues.password.value !== signUpInputValues.passwordReEnter.value) {\r\n            setSignUpHelperText(\"Passwords must match\")\r\n            return\r\n        }\r\n\r\n        // disable signup button\r\n        setLoadingSignUp(true)\r\n\r\n        const userObj = {\r\n            email: signUpInputValues.email.value,\r\n            username: signUpInputValues.username.value,\r\n            name: signUpInputValues.name.value,\r\n            password: signUpInputValues.password.value\r\n        }\r\n\r\n        API.createUser(userObj)\r\n            .then(response => {\r\n                // get access token (jwt) and user id from response\r\n                const username = response.data.username\r\n                const token = response.headers['auth-token']\r\n\r\n                // store token in storage\r\n                localStorage.setItem('accessToken', token);\r\n                // redirect user to their profile page\r\n                history.push(`/user/${username}`)\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response)\r\n                if (err.response && err.response.status) {\r\n                    switch (err.response.status) {\r\n                        case 409:\r\n                            // 409 for email taken\r\n                            setSignUpHelperText('Email taken')\r\n                            break;\r\n                        case 422:\r\n                            // 422 for username taken\r\n                            setSignUpHelperText(\"Username taken\")\r\n                            break;\r\n                    }\r\n                }\r\n            })\r\n            .finally(() => {\r\n                setLoadingSignUp(false)\r\n            })\r\n    }, [signUpInputValues])\r\n\r\n    const hidePreloader = () => {\r\n        setIsPageLoaded(false);\r\n    }\r\n\r\n    // functiont to make sure all input fields are filled out\r\n    const checkForEmptyField = (inputsObj, setHelperTextFunc) => {\r\n        // create array of all keys in state object\r\n        const inputNames = Object.keys(inputsObj)\r\n        for (let i = 0; i < inputNames.length; i++) {\r\n            const inputName = inputNames[i]\r\n            const inputValue = inputsObj[inputName].value\r\n            const inputHelperText = inputsObj[inputName].helperText\r\n            // check if obj property is blank and update helper text if blank, then return\r\n            if (!inputValue) {\r\n                setHelperTextFunc(inputHelperText)\r\n                return false\r\n            }\r\n        }\r\n\r\n        // if all fields filled out, return true\r\n        return true\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PreLoader show={isPageLoaded} />\r\n            <Header isLoginPage={true} handleLoginInfo={hidePreloader} />\r\n            <div>\r\n                <div className='login-page-forms-wrapper'>\r\n                    <form className={`login-page-form${isLoggingIn ? '' : ' hide'}`} onSubmit={handleLoginAttempt}>\r\n                        <h2>Login</h2>\r\n                        <div className={`helper-wrapper${loginHelperText ? '' : ' hide'}`}>\r\n                            {loginHelperText}\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <input className='dark-input' id='loginEmailInput' type='email' onChange={handleLoginInputChange} name='email' value={loginInputValues.email.value} placeholder='Email' aria-label='email' />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <input className='dark-input' id='loginPasswordInput' type='password' onChange={handleLoginInputChange} name='password' value={loginInputValues.password.value} placeholder='Password' aria-label='password' />\r\n                        </div>\r\n                        <div className='submit-btn-wrapper'>\r\n                            <button \r\n                                className='blue-btn'\r\n                                disabled={loadingLogin}>Login <span><FontAwesomeIcon icon={faSpinnerThird} className={`btn-load-spinner${loadingLogin ? '' : ' hide'}`} /></span></button>\r\n                        </div>\r\n                        <p className='login-display-change-text'>Don't have an account? <span onClick={toggleFormToDisplay}>Create an account</span></p>\r\n                    </form>\r\n                    <form className={`login-page-form${isLoggingIn ? ' hide' : ''}`} onSubmit={handleSignUpAttempt}>\r\n                        <h2>Register</h2>\r\n                        <div className={`helper-wrapper${signUpHelperText ? '' : ' hide'}`}>\r\n                            {signUpHelperText}\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <input className='dark-input' id='registerEmailInput' type='email' onChange={handleSignupInputChange} name='email' value={signUpInputValues.email.value} placeholder='Email' aria-label='email' />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <input className='dark-input' id='registerUsernameInput' type='text' onChange={handleSignupInputChange} name='username' value={signUpInputValues.username.value} placeholder='Username' aria-label='username' />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <input className='dark-input' id='registerFullNameInput' type='text' onChange={handleSignupInputChange} name='name' value={signUpInputValues.name.value} placeholder='Full Name' aria-label='full name' />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <input className='dark-input' id='registerPasswordInput' type='password' onChange={handleSignupInputChange} name='password' value={signUpInputValues.password.value} placeholder='Password' aria-label='password' />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <input className='dark-input' id='registerPasswordReEnterInput' type='password' onChange={handleSignupInputChange} name='passwordReEnter' value={signUpInputValues.passwordReEnter.value} placeholder='Re-Enter Password' aria-label='re-enter password' />\r\n                        </div>\r\n                        <div className='submit-btn-wrapper'>\r\n                            <button \r\n                                className='blue-btn'\r\n                                disabled={loadingSignUp}>Register <span><FontAwesomeIcon icon={faSpinnerThird} className={`btn-load-spinner${loadingSignUp ? '' : ' hide'}`} /></span></button>\r\n                        </div>\r\n                        <p className='login-display-change-text'>Already have an account? <span onClick={toggleFormToDisplay}>Log in</span></p>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useRef, useEffect, useCallback } from 'react'\r\nimport API from '../../utils/API'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSpinnerThird } from '@fortawesome/pro-regular-svg-icons'\r\nimport './index.css'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport default function NewPostModal(props) {\r\n    let history = useHistory();\r\n\r\n    const imageUploadSvg = useRef();\r\n\r\n    const [isPosting, setIsPosting] = useState(false)\r\n\r\n    const [helperText, setHelperText] = useState('')\r\n\r\n    const [imgToPost, setImgToPost] = useState('')\r\n    const captionTextarea = useRef()\r\n    const [captionCount, setCaptionCount] = useState(0)\r\n\r\n    const fileInput = useRef()\r\n\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n\r\n    // handler when user selects a new image for upload\r\n    const handleImageChange = (e) => {\r\n        // get location of image on user's computer\r\n        const selectedFile = e.target.files[0]\r\n        // create reader to read img file\r\n        const reader = new FileReader();\r\n\r\n        // when file is ready, update state with new img\r\n        reader.onload = (event) => setImgToPost(event.target.result)\r\n\r\n        // read image\r\n        reader.readAsDataURL(selectedFile)\r\n    }\r\n\r\n    const handlePostBtnClick = useCallback(() => {\r\n        // remove any helper text\r\n        setHelperText('')\r\n        // if user has not chosen an img yet, alert with helper text\r\n        if (!imgToPost) {\r\n            return setHelperText('Please choose an image to post')\r\n        }\r\n\r\n        // disable post buttons while posting\r\n        setIsPosting(true);\r\n\r\n        // upload image to cloudinary\r\n        API.uploadToCloudinary(imgToPost)\r\n            .then(response => {\r\n                // make request to server to add post to db\r\n                API.createPost({ img: response.data.url, caption: captionTextarea.current.value })\r\n                    .then(response => {\r\n                        // refresh page to load in new post\r\n                        history.go(0)\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err)\r\n                    })\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response)\r\n            }).\r\n            finally(() => setIsPosting(false))\r\n\r\n    }, [imgToPost])\r\n\r\n    const hideModal = () => {\r\n        props.setShow(false)\r\n        // show search bar in header\r\n        const searchbar = document.querySelector('.header-search-wrapper')\r\n        searchbar.style.opacity = 1\r\n    }\r\n\r\n    const updateCaptionCharCount = useCallback(() => {\r\n        // set length of caption text in state\r\n        const captionText = captionTextarea.current.value\r\n        setCaptionCount(captionText.length)\r\n    }, [captionCount])\r\n\r\n    return (\r\n        <>\r\n            {/* <WidgetLoader /> */}\r\n            <div className={`new-post-modal-wrapper-outer${props.show ? '' : ' hide'}`}>\r\n                <div className='new-post-modal-wrapper-inner'>\r\n                    <h2>New Post</h2>\r\n                    <button className='exit-btn' onClick={hideModal} disabled={isPosting}><span>&times;</span></button>\r\n                    <div className={`helper-wrapper${!helperText ? ' hide' : ''}`}>\r\n                        {helperText}\r\n                    </div>\r\n                    <div className='img-aspect-ratio-wrapper'>\r\n                        <div className='img-wrapper'>\r\n                            {/* show img if there is one, else show svg graphic to add image */}\r\n                            {imgToPost ?\r\n                                <>\r\n                                    <img src={imgToPost} alt='Image to post' />\r\n                                    <div className='btn-wrapper'>\r\n                                        <button className='dark-btn' onClick={() => fileInput.current.click()}>Change Image</button>\r\n                                    </div>\r\n                                </> :\r\n                                <>\r\n                                    <h3 onClick={() => fileInput.current.click()}>Upload Image</h3>\r\n                                    <svg onClick={() => fileInput.current.click()} ref={imageUploadSvg} id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 97.75 48.75\"><defs></defs><rect className=\"cls-1\" x=\"0.38\" y=\"0.38\" width=\"97\" height=\"48\" rx=\"3.89\" /></svg>\r\n                                </>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className='caption-wrapper'>\r\n                        <textarea ref={captionTextarea} placeholder='Caption' maxLength='300' onChange={updateCaptionCharCount}></textarea>\r\n                        <small className='text-count'>{captionCount}/300</small>\r\n                    </div>\r\n                    <div className='post-btn-wrapper'>\r\n                        <button className='blue-btn create-post-btn' onClick={handlePostBtnClick} disabled={isPosting}>\r\n                            Post <span><FontAwesomeIcon icon={faSpinnerThird} className={`btn-load-spinner${isPosting ? '' : ' hide'}`} /></span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                {/* this is a hidden input that will be activated through JS to get image from user's computer */}\r\n                <input ref={fileInput} onChange={handleImageChange} className='hide' type='file' />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { faGameConsoleHandheld } from '@fortawesome/pro-solid-svg-icons'\r\nimport React, { useState, useEffect, useCallback, useRef } from 'react'\r\nimport { useHistory, useParams, Link, useLocation } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSpinnerThird } from '@fortawesome/pro-regular-svg-icons'\r\nimport Footer from '../../components/Footer'\r\nimport Header from '../../components/Header'\r\nimport NewPostModal from '../../components/NewPostModal'\r\nimport PreLoader from '../../components/PreLoader'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\n\r\nexport default function Profilepage() {\r\n    let history = useHistory()\r\n    let location = useLocation();\r\n\r\n    let { username: profilePageUsername } = useParams()\r\n    // ref storing username of profile visited to detect when the user is trying to visit a different profile page\r\n    let lastProfilePage = useRef(profilePageUsername)\r\n\r\n    const [user, setUser] = useState({\r\n        username: '',\r\n        name: '',\r\n        profileImg: '',\r\n        bio: '',\r\n        followersCount: 0,\r\n        followingCount: 0\r\n    })\r\n\r\n    const [isPageLoaded, setIsPageLoaded] = useState(false)\r\n    // states indicating if user is in process of following user\r\n    const [isFollowing, setIsFollowing] = useState(false)\r\n    const [isUnfollowing, setIsUnfollowing] = useState(false)\r\n\r\n    const [posts, setPosts] = useState([])\r\n\r\n    const [currentUserIsSameAsProfile, setCurrentUserIsSameAsProfile] = useState(false)\r\n    const [isFollowingUser, setIsFollowingUser] = useState(false)\r\n\r\n    const [showNewPostModal, setShowNewPostModal] = useState(false)\r\n\r\n    useEffect(() => {\r\n        // if user is trying to visit another profile page but page won't change due to only \r\n        // changing a parameter in the url, reload the page\r\n        if (profilePageUsername !== lastProfilePage.current) {\r\n            history.go(0)\r\n        }\r\n    }, [location])\r\n\r\n    const followUser = useCallback(() => {\r\n        // disable follow button\r\n        setIsFollowing(true)\r\n\r\n        API.followUser(user.id).\r\n            then(response => {\r\n                // reload page\r\n                history.go(0)\r\n            }).\r\n            catch(err => {\r\n                console.log(err.response)\r\n            }).\r\n            finally(() => setIsFollowing(false))\r\n    }, [user.id])\r\n\r\n    const unfollowUser = useCallback(() => {\r\n        // disable unfollow button\r\n        setIsUnfollowing(true)\r\n\r\n        API.unfollowUser(user.id).\r\n            then(response => {\r\n                // reload page\r\n                history.go(0)\r\n            }).\r\n            catch(err => {\r\n                console.log(err.response)\r\n            }).\r\n            finally(() => {\r\n                setIsUnfollowing(false)\r\n            })\r\n    }, [user.id])\r\n\r\n    // function to handle info from server if user is logged in\r\n    const handleTokenInfo = data => {\r\n        const { username } = data\r\n\r\n        // first make request to server for info of profile page user\r\n        API.getUser(profilePageUsername, username)\r\n            .then(response => {\r\n                const userObj = response.data\r\n                console.log('userobj', userObj)\r\n\r\n                // update state with user info\r\n                setIsFollowingUser(userObj.isFollowing || false)\r\n\r\n                // remove 'isFollowing' prop from obj\r\n                if (userObj.isFollowing) delete userObj.isFollowing\r\n\r\n                setUser(userObj)\r\n\r\n                // now that we have the user's id, get all the posts by that user\r\n                API.getUserPosts(userObj.id)\r\n                    .then(response => {\r\n                        // add posts array to state\r\n                        setPosts(response.data)\r\n                    })\r\n            })\r\n            .catch(err => {\r\n                // if any error shows up, redirect back to home page\r\n                history.push('/')\r\n            })\r\n            .finally(() => {\r\n                setIsPageLoaded(true)\r\n            })\r\n\r\n        // check if logged in user's username matches username of current profile page\r\n        if (username === profilePageUsername) {\r\n            // update state\r\n            setCurrentUserIsSameAsProfile(true)\r\n        } else {\r\n            // else user is looking at another user's profile page\r\n        }\r\n    }\r\n\r\n    // function to determine if a post thumbnail will show up in the 1st, 2nd, or 3rd column of displayed post thumbnails\r\n    const getColOfThumbnail = number => {\r\n        // if user is viewing their own profile page, a 'new-post' will show up in first slot\r\n        // increase index by 1 to account for this\r\n        if (currentUserIsSameAsProfile) {\r\n            number++\r\n        }\r\n\r\n        // if number passed is divisible by 3, that post is in the third column\r\n        if (number % 3 === 0) return 3\r\n        // if number - 2 is divisible by 3, that post is in the 2nd column\r\n        if ((number - 2) % 3 === 0) return 2\r\n        // if number - 1 is divisible by 3, that post is in the 1st column\r\n        if ((number - 1) % 3 === 0) return 1\r\n    }\r\n\r\n    const handleNewPostBtnClick = () => {\r\n        // bring up modal for creating a new post\r\n        setShowNewPostModal(true)\r\n        // hide search bar in header\r\n        const searchbar = document.querySelector('.header-search-wrapper')\r\n        searchbar.style.opacity = 0\r\n    }\r\n\r\n    const logout = () => {\r\n        // remove token from local storage\r\n        localStorage.removeItem('accessToken')\r\n\r\n        // send user to login page\r\n        history.push('/login')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PreLoader show={!isPageLoaded} />\r\n            <NewPostModal setShow={setShowNewPostModal} show={showNewPostModal} />\r\n            <Header handleTokenInfo={handleTokenInfo} />\r\n            <div className='content-header-footer-offset'>\r\n                <div className='content-main-responsive'>\r\n                    <div className='profile-info-wrapper'>\r\n                        <h1>{user.username}</h1>\r\n                        <div className='row top'>\r\n                            <div className='flex-group left'>\r\n                                <div className='profile-img-wrapper'>\r\n                                    <img src={user.profileImg || 'https://i.imgur.com/dCc7ake.png'} alt='user profile picture' />\r\n                                </div>\r\n                            </div>\r\n                            <div className='flex-group right'>\r\n                                <div className='follows-wrapper'>\r\n                                    <div className='followers'>\r\n                                        <p className='followers-count'>{user.followersCount}</p>\r\n                                        <p>Followers</p>\r\n                                    </div>\r\n                                    <div className='following'>\r\n                                        <p className='following-count'>{user.followingCount}</p>\r\n                                        <p>Following</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='profile-option-btns-wrapper'>\r\n                                    {currentUserIsSameAsProfile ? <>\r\n                                        <button className='blue-btn' onClick={() => history.push(`/user/edit/${user.username}`)}>Edit Profile</button>\r\n                                        <button className='blue-btn' onClick={logout}>Logout</button></> :\r\n                                        isFollowingUser ?\r\n                                            <button\r\n                                                className='blue-btn'\r\n                                                onClick={unfollowUser}\r\n                                                disabled={isUnfollowing}>Unfollow <span>\r\n                                                    <FontAwesomeIcon\r\n                                                        icon={faSpinnerThird}\r\n                                                        className={`btn-load-spinner${isUnfollowing ? '' : ' hide'}`} /></span></button> :\r\n                                            <button\r\n                                                className='blue-btn'\r\n                                                onClick={followUser}\r\n                                                disabled={isFollowing}>Follow <span>\r\n                                                    <FontAwesomeIcon\r\n                                                        icon={faSpinnerThird}\r\n                                                        className={`btn-load-spinner${isFollowing ? '' : ' hide'}`} /></span></button>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='row bottom'>\r\n                            <div className='user-name-wrapper'>\r\n                                {user.name}\r\n                            </div>\r\n                            <div className='profile-option-btns-wrapper mobile'>\r\n                                {currentUserIsSameAsProfile ? <>\r\n                                    <button className='blue-btn' onClick={() => history.push(`/user/edit/${user.username}`)}>Edit Profile</button>\r\n                                    <button className='blue-btn' onClick={logout}>Logout</button></> :\r\n                                    isFollowingUser ?\r\n                                        <button\r\n                                            className='blue-btn'\r\n                                            onClick={unfollowUser}\r\n                                            disabled={isUnfollowing}>Unfollow <span>\r\n                                                <FontAwesomeIcon\r\n                                                    icon={faSpinnerThird}\r\n                                                    className={`btn-load-spinner${isUnfollowing ? '' : ' hide'}`} /></span></button> :\r\n                                        <button\r\n                                            className='blue-btn'\r\n                                            onClick={followUser}\r\n                                            disabled={isFollowing}>Follow <span>\r\n                                                <FontAwesomeIcon\r\n                                                    icon={faSpinnerThird}\r\n                                                    className={`btn-load-spinner${isFollowing ? '' : ' hide'}`} /></span></button>\r\n                                }\r\n                            </div>\r\n                            <p className='profile-bio'>{user.bio || ''}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className='profile-posts-wrapper'>\r\n                        {/* if user is viewing their own profile page and they have atleast one post, make the first post a button to create a new post */}\r\n                        {currentUserIsSameAsProfile && posts.length > 0 ?\r\n                            <div className='profile-post-thumb new-post-btn' onClick={handleNewPostBtnClick}>\r\n                                <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 62.75 62.75\"><defs><style></style></defs><circle class=\"cls-1\" cx=\"31.38\" cy=\"31.38\" r=\"31\" /><line className=\"cls-2\" x1=\"31.38\" y1=\"20.38\" x2=\"31.38\" y2=\"42.37\" /><line className=\"cls-2\" x1=\"42.37\" y1=\"31.38\" x2=\"20.38\" y2=\"31.38\" /></svg>\r\n                            </div> : currentUserIsSameAsProfile ?\r\n                                // else if user is viewing their own page but has no posts, display btn to create first post\r\n                                <button\r\n                                    className='first-post-btn dark-btn'\r\n                                    onClick={handleNewPostBtnClick}>\r\n                                    Create Your First Post\r\n                                </button> :\r\n                                // else user is viewing another's page but user has no posts\r\n                                <div className='no-posts-display'>\r\n                                    User has not posted yet\r\n                                </div>}\r\n                        {posts.map((post, index) => {\r\n                            // get column that thumbnail will show up in (add 1 to index to start counting at 1)\r\n                            const col = getColOfThumbnail(index + 1)\r\n                            return (\r\n                                <div\r\n                                    className={`profile-post-thumb${col === 1 ? ' first-col' : ''}${col === 3 ? ' third-col' : ''}`}\r\n                                    onClick={() => history.push(`/post/${post._id}`)}>\r\n                                    <img src={post.img} alt='thumbnail of post' />\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState, useRef, useCallback } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSpinnerThird } from '@fortawesome/pro-regular-svg-icons'\r\nimport Footer from '../../components/Footer'\r\nimport Header from '../../components/Header'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\nimport PreLoader from '../../components/PreLoader'\r\n\r\nexport default function EditProfile() {\r\n    let history = useHistory();\r\n\r\n    const [isPageLoaded, setIsPageLoaded] = useState(false)\r\n\r\n    const { username } = useParams()\r\n\r\n    const fileInputEle = useRef()\r\n\r\n    const [helperText, setHelperText] = useState('')\r\n\r\n    const [displayUsername, setDisplayUsername] = useState('')\r\n\r\n    const [user, setUser] = useState({\r\n        email: '',\r\n        username: '',\r\n        name: '',\r\n        bio: '',\r\n        profilePicture: ''\r\n    })\r\n\r\n    const userHasChangedProfilePic = useRef(false)\r\n\r\n    const [isUpdating, setIsUpdating] = useState(false)\r\n\r\n    useEffect(() => {\r\n        console.log(username)\r\n        // on load, get user data from database\r\n        API.getUser(username).\r\n            then(response => {\r\n                console.log(response.data)\r\n                // update state with new data\r\n                setUser({ ...response.data, profilePicture: response.data.profileImg })\r\n                setDisplayUsername(response.data.username)\r\n            }).\r\n            finally(() => {\r\n                setIsPageLoaded(true)\r\n            })\r\n    }, [])\r\n\r\n    const handleInputChange = e => {\r\n        // get name and value of input changed\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n\r\n        // update state with new value\r\n        setUser({ ...user, [name]: value })\r\n    }\r\n\r\n    const handleChangeImgBtnClick = e => {\r\n        e.preventDefault();\r\n\r\n        // click file input element\r\n        fileInputEle.current.click();\r\n    }\r\n\r\n    const handleImgChange = e => {\r\n        // get location of image on user's computer\r\n        const selectedFile = e.target.files[0]\r\n        // create reader to read img file\r\n        const reader = new FileReader();\r\n\r\n        // when file is ready, update state with new img\r\n        reader.onload = (event) => setUser({ ...user, profilePicture: event.target.result })\r\n\r\n        // read image\r\n        reader.readAsDataURL(selectedFile)\r\n\r\n        // update ref to show user has changed their profile picture\r\n        userHasChangedProfilePic.current = true\r\n    }\r\n\r\n    const handleFormSubmit = useCallback(e => {\r\n        e.preventDefault();\r\n\r\n        // if no email is provided, tell user to add a valid email\r\n        if (!user.email) {\r\n            return setHelperText('Email can not be blank')\r\n        }\r\n        // if no username is provided, tell user to add a valid username\r\n        if (!user.username) {\r\n            return setHelperText(\"Username can not be blank\")\r\n        }\r\n\r\n        setIsUpdating(true)\r\n\r\n        // if user has updated their profile pic, upload the new image to cloudinary\r\n        if (userHasChangedProfilePic.current) {\r\n            // upload image to cloudinary\r\n            API.uploadProfilePic(user.profilePicture).\r\n                then(response => {\r\n                    console.log(response.data)\r\n                    // send user data to db\r\n                    updateUserDB(response.data.url)\r\n                }).\r\n                catch(err => {\r\n                    console.log(err.response)\r\n                    alert(\"An error occurred while uploading profile picture\")\r\n                    setIsUpdating(false)\r\n                })\r\n        } else {\r\n            // else user didn't change their profile pic\r\n            updateUserDB(null)\r\n        }\r\n    }, [user])\r\n\r\n    // function to make API request to update user data in DB\r\n    const updateUserDB = (img) => {\r\n        // send user info to server\r\n        API.userUpdate({ ...user, profilePicture: img || user.profilePicture }).\r\n            then(response => {\r\n                console.log(response.data)\r\n                // store new token in local storage\r\n                localStorage.setItem('accessToken', response.headers['auth-token'])\r\n                // send user to their profile page\r\n                history.push(`/user/${response.data.username}`)\r\n            }).\r\n            catch(err => {\r\n                console.log(err.response)\r\n                if (err.response.status) {\r\n                    switch (err.response.status) {\r\n                        case 409:\r\n                            // 409: email taken\r\n                            setHelperText('Email Taken')\r\n                            break;\r\n                        case 422:\r\n                            // 422: username taken\r\n                            setHelperText(\"Username Taken\")\r\n                            break;\r\n                        case 401:\r\n                        case 403:\r\n                            // 401 || 403 : invalid token\r\n                            history.push('/login')\r\n                            break;\r\n                    }\r\n                }\r\n            }).\r\n            finally(() => {\r\n                setIsUpdating(false)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PreLoader show={!isPageLoaded}/>\r\n            <Header />\r\n            <div className='content-header-footer-offset edit-profile-content-wrapper'>\r\n                <h1>{displayUsername}</h1>\r\n                <form className='edit-profile-form'>\r\n                    <div className={`helper-wrapper${helperText ? '' : ' hide'}`}>\r\n                        {helperText}\r\n                    </div>\r\n                    <div className='profile-pic'>\r\n                        <div className='img-wrapper'>\r\n                            <img src={user.profilePicture || 'https://i.imgur.com/dCc7ake.png'} alt='profile picture' />\r\n                        </div>\r\n                        <button \r\n                            className='dark-btn' \r\n                            onClick={handleChangeImgBtnClick}\r\n                            disabled={isUpdating}>Change Image</button>\r\n                        {/* hidden input for getting image from computer */}\r\n                        <input ref={fileInputEle} className='hide' type='file' onChange={handleImgChange} />\r\n                    </div>\r\n                    <label for='edit-profile-username'>Username</label>\r\n                    <input\r\n                        className='dark-input'\r\n                        id='edit-profile-username'\r\n                        type='text'\r\n                        placeholder='Username'\r\n                        name='username'\r\n                        value={user.username}\r\n                        onChange={handleInputChange} />\r\n                    <label for='edit-profile-name'>Name</label>\r\n                    <input\r\n                        id='edit-profile-name'\r\n                        className='dark-input'\r\n                        type='text'\r\n                        placeholder='Name'\r\n                        name='name'\r\n                        value={user.name}\r\n                        onChange={handleInputChange} />\r\n                    <label for='edit-profile-email'>Email</label>\r\n                    <input\r\n                        className='dark-input'\r\n                        id='edit-profile-email'\r\n                        type='email'\r\n                        placeholder='Email'\r\n                        name='email'\r\n                        value={user.email}\r\n                        onChange={handleInputChange} />\r\n                    <label for='edit-profile-bio'>Bio</label>\r\n                    <textarea \r\n                        id='edit-profile-bio'\r\n                        className='dark-input'\r\n                        name='bio'\r\n                        value={user.bio}\r\n                        placeholder='Bio'\r\n                        maxLength='300'\r\n                        onChange={handleInputChange}></textarea>\r\n                    <small>{user.bio ? user.bio.length : 0}/300</small>\r\n                    <div className='btn-wrapper'>\r\n                        <button\r\n                            className='blue-btn'\r\n                            onClick={handleFormSubmit}\r\n                            disabled={isUpdating}>\r\n                            Save Changes <FontAwesomeIcon \r\n                                            icon={faSpinnerThird} \r\n                                            className={`btn-load-spinner${isUpdating ? '' : ' hide'}`}/>\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport Footer from '../../components/Footer'\r\nimport Header from '../../components/Header'\r\nimport PostCard from '../../components/PostCard'\r\nimport PreLoader from '../../components/PreLoader'\r\nimport API from '../../utils/API'\r\n\r\nexport default function Post() {\r\n    let history = useHistory();\r\n    let { id: postId } = useParams()\r\n\r\n    const [isPageLoaded, setIsPageLoaded] = useState(false)\r\n\r\n    const [post, setPost] = useState(null)\r\n    const [loggedInUser, setLoggedInUser] = useState(null)\r\n\r\n    useEffect(() => {\r\n        // get post data from db\r\n        API.getPost(postId).\r\n            then(response => {\r\n                const post = response.data.post\r\n                const user = response.data.user\r\n                // determine whether or not user has liked the post\r\n                if (post.likedBy.includes(user.id)) {\r\n                    console.log('has liked')\r\n                    // user has liked this post\r\n                    post.hasLiked = true\r\n                } else {\r\n                    console.log('has not liked')\r\n                    // else user has not liked this post\r\n                    post.hasLiked = false\r\n                }\r\n\r\n                // update state with new post\r\n                setPost(post)\r\n                setLoggedInUser(user)\r\n            }).\r\n            catch(err => {\r\n                console.log(err.response)\r\n                if (err.response.status) {\r\n                    switch (err.response.status) {\r\n                        case 401:\r\n                        case 403:\r\n                            // user's token is no longer valid, redirect to login\r\n                            alert('Session has timed out')\r\n                            history.push('/login')\r\n                            break;\r\n                    }\r\n                }\r\n            }).\r\n            finally(() => {\r\n                setIsPageLoaded(true)\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <PreLoader show={!isPageLoaded} />\r\n            <Header />\r\n            <div className='content-header-footer-offset'>\r\n                <div className='content-main-responsive'>\r\n                    {post ?\r\n                        <PostCard \r\n                            post={post} \r\n                            user={post.creator} \r\n                            loggedInUser={loggedInUser}\r\n                            isPostPage={true}/> :\r\n                        ''}\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useCallback } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Footer from '../../components/Footer'\r\nimport Header from '../../components/Header'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch, faSpinnerThird } from '@fortawesome/pro-solid-svg-icons'\r\nimport './index.css'\r\nimport API from '../../utils/API'\r\nimport PreLoader from '../../components/PreLoader'\r\n\r\nexport default function Search() {\r\n    let history = useHistory();\r\n\r\n    const [isPageLoaded, setIsPageLoaded] = useState(false)\r\n\r\n    const [query, setQuery] = useState();\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [results, setResults] = useState(null)\r\n\r\n    const handleInputChange = e => {\r\n        // update state with new query from input element\r\n        const value = e.target.value\r\n        setQuery(value)\r\n    }\r\n\r\n    // funciton called when user log in has been verified\r\n    const hidePreloader = () => {\r\n        setIsPageLoaded(true)\r\n    }\r\n\r\n    const search = useCallback((e) => {\r\n        e.preventDefault();\r\n        setIsLoading(true)\r\n\r\n        // send search query to server to search for users\r\n        API.getSearchResults(query).\r\n            then(response => {\r\n                // update state with new users\r\n                setResults(response.data)\r\n                console.log(response.data)\r\n            }).\r\n            catch(err => {\r\n                console.log(err.response)\r\n            }).\r\n            finally(() => {\r\n                setIsLoading(false)\r\n            })\r\n    }, [query])\r\n\r\n    return (\r\n        <>\r\n            <PreLoader show={!isPageLoaded} />\r\n            <Header handleTokenInfo={hidePreloader} />\r\n            <div className='content-header-footer-offset'>\r\n                <div className='content-main-responsive search-page'>\r\n                    <form className='search-form' onSubmit={search}>\r\n                        <input\r\n                            className='dark-input'\r\n                            type='text'\r\n                            name='user'\r\n                            placeholder='Search'\r\n                            value={query}\r\n                            onChange={handleInputChange} />\r\n                        <FontAwesomeIcon\r\n                            icon={faSearch}\r\n                            className='search-icon'\r\n                            onClick={search} />\r\n                    </form>\r\n                    <div className='results'>\r\n                        {results ?\r\n                            results.map(user => {\r\n                                return (\r\n                                    <div className='user'>\r\n                                        <div \r\n                                            className='profile-img'\r\n                                            onClick={() => history.push(`/user/${user.username}`)}>\r\n                                            <img \r\n                                                src={user.profilePicture || 'https://i.imgur.com/dCc7ake.png'}\r\n                                                alt='profile picture' />\r\n                                        </div>\r\n                                        <p \r\n                                            className='username'\r\n                                            onClick={() => history.push(`/user/${user.username}`)}>{user.username}</p>\r\n                                    </div>\r\n                                )\r\n                            }) : isLoading ?\r\n                                <FontAwesomeIcon\r\n                                    icon={faSpinnerThird}\r\n                                    className='results-spinner' /> : ''}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport Home from './pages/Home';\r\nimport Header from './components/Header';\r\nimport Login from './pages/Login';\r\nimport Profilepage from './pages/ProfilePage';\r\nimport EditProfile from './pages/EditProfile';\r\nimport Post from './pages/Post';\r\nimport Search from './pages/Search';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router basename='/social-media-app'>\r\n        <Switch>\r\n          <Route exact path='/'>\r\n            <Home />\r\n          </Route>\r\n          <Route exact path='/login'>\r\n            <Login />\r\n          </Route>\r\n          <Route exact path='/user/:username'>\r\n            <Profilepage />\r\n          </Route>\r\n          <Route exact path='/user/edit/:username'>\r\n            <EditProfile />\r\n          </Route>\r\n          <Route exact path='/post/:id'>\r\n            <Post />\r\n          </Route>\r\n          <Route exact path='/search'>\r\n            <Search />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}