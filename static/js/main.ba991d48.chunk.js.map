{"version":3,"sources":["components/HeaderSearchResults/index.js","components/Header/index.js","utils/API.js","components/Footer/index.js","components/PostCard/index.js","pages/Home/index.js","pages/Login/index.js","components/NewPostModal/index.js","pages/ProfilePage/index.js","pages/EditProfile/index.js","pages/Post/index.js","pages/Search/index.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderSearchResults","props","history","useHistory","className","show","icon","faSpinnerThird","isLoading","results","map","user","src","profilePicture","alt","onClick","push","username","Header","searchInput","useLocation","useRef","searchInputWrapper","searchInputAndResultsWrapper","useState","isFocusedOnSearch","setIsFocusedOnSearch","searchResults","setSearchResults","showSearchResults","setShowSearchResults","isGettingSearchResults","setIsGettingSearchResults","loggedInUsername","setLoggedInUsername","useEffect","API","validateUserLoggedIn","then","response","handleTokenInfo","data","catch","err","document","addEventListener","e","target","current","contains","handleUserIconClick","useCallback","to","isLoginPage","ref","onSubmit","preventDefault","query","value","getSearchResults","console","log","finally","placeholder","aria-label","onFocus","onBlur","faSearch","setShow","solidSearch","faHomeLgAlt","faUser","API_ENDPOINT","process","updatePostLikeStatus","postId","userLikedPost","axios","put","id","getUser","profilePageUsername","visitingUser","get","setHeaderToken","getUserPosts","createUser","userObj","post","userLogin","userUpdate","localStorage","getItem","followUser","userToFollowId","unfollowUser","userToUnfollowId","getPost","createPost","deletePost","delete","getHomePagePosts","a","token","uploadToCloudinary","img","file","upload_preset","uploadProfilePic","likePost","unlikePost","Footer","PostCard","hasLiked","postIsLiked","setPostIsLiked","userIsCreator","setUserIsCreator","isUpdatingLikeStatus","loggedInUser","_id","handleLikeBtnClick","status","alert","handlePostDelete","faTrashAlt","isPostPage","solidHeart","lightHeart","likes","caption","Home","posts","setPosts","likedBy","includes","creator","Login","isLoggingIn","setIsLogginIn","loadingLogin","setLoadingLogin","loadingSignUp","setLoadingSignUp","loginHelperText","setLoginHelperText","signUpHelperText","setSignUpHelperText","email","helperText","password","loginInputValues","setLoginInputValues","name","passwordReEnter","signUpInputValues","setSignUpInputValues","toggleFormToDisplay","handleLoginInputChange","handleSignupInputChange","handleLoginAttempt","checkForEmptyField","headers","setItem","handleSignUpAttempt","inputsObj","setHelperTextFunc","inputNames","Object","keys","i","length","inputName","inputValue","inputHelperText","type","onChange","NewPostModal","imageUploadSvg","isPosting","setHelperText","imgToPost","setImgToPost","captionTextarea","captionCount","setCaptionCount","fileInput","handlePostBtnClick","url","go","updateCaptionCharCount","captionText","querySelector","style","opacity","disabled","click","data-name","xmlns","viewBox","x","y","width","height","rx","maxLength","selectedFile","files","reader","FileReader","onload","event","result","readAsDataURL","Profilepage","useParams","profileImg","bio","followersCount","followingCount","setUser","currentUserIsSameAsProfile","setCurrentUserIsSameAsProfile","isFollowingUser","setIsFollowingUser","showNewPostModal","setShowNewPostModal","handleNewPostBtnClick","logout","removeItem","isFollowing","class","cx","cy","r","x1","y1","x2","y2","index","number","col","EditProfile","fileInputEle","displayUsername","setDisplayUsername","userHasChangedProfilePic","isUpdating","setIsUpdating","handleInputChange","handleFormSubmit","updateUserDB","for","Post","setPost","setLoggedInUser","Search","setQuery","setIsLoading","setResults","search","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ba991d48.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSpinnerThird } from '@fortawesome/pro-solid-svg-icons'\r\nimport './index.css'\r\n\r\nexport default function HeaderSearchResults(props) {\r\n    let history = useHistory();\r\n\r\n    return (\r\n        <div className={`header-search-results-wrapper${props.show ? '' : ' hide'}`}>\r\n            <FontAwesomeIcon \r\n                icon={faSpinnerThird} \r\n                className={`search-results-spinner${props.isLoading ? '' : ' hide'}`}/>\r\n            {props.results.map(user => {\r\n                return (\r\n                    <div className='search-result'>\r\n                        <div className='profile-img'>\r\n                            <img\r\n                                src={user.profilePicture || 'https://i.imgur.com/dCc7ake.png'}\r\n                                alt='user profile picture'\r\n                                onClick={() => history.push('/user/' + user.username)}/>\r\n                        </div>\r\n                        <p \r\n                            className='username'\r\n                            onClick={() => history.push('/user/' + user.username)}\r\n                            >{user.username}</p>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useRef, useState, useCallback } from 'react'\r\nimport { Link, useHistory, useLocation } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPaperPlane, faUser } from '@fortawesome/free-solid-svg-icons'\r\nimport { faHomeLgAlt, faSearch as solidSearch } from '@fortawesome/pro-solid-svg-icons'\r\nimport { faSearch } from '@fortawesome/pro-regular-svg-icons'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\nimport HeaderSearchResults from '../HeaderSearchResults'\r\n\r\nexport default function Header(props) {\r\n    let history = useHistory();\r\n    let location = useLocation();\r\n\r\n    const searchInput = useRef()\r\n    const searchInputWrapper = useRef()\r\n    const searchInputAndResultsWrapper = useRef();\r\n\r\n    const [isFocusedOnSearch, setIsFocusedOnSearch] = useState(false)\r\n\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const [showSearchResults, setShowSearchResults] = useState(false)\r\n    const [isGettingSearchResults, setIsGettingSearchResults] = useState(false)\r\n\r\n    const [loggedInUsername, setLoggedInUsername] = useState(null)\r\n\r\n    useEffect(() => {\r\n        // on page load, validate that user is logged in\r\n        API.validateUserLoggedIn()\r\n            .then(response => {\r\n                // if response is false, no token was found in storage so redirect to login\r\n                if (!response) {\r\n                    return history.push('/login')\r\n                } else {\r\n                    // else send user info to handler function for page if function exists\r\n                    if (props.handleTokenInfo) {\r\n                        props.handleTokenInfo(response.data)\r\n                    }\r\n                    // update state with user's username\r\n                    setLoggedInUsername(response.data.username)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                // if token could not be validated, send user to login page\r\n                history.push('/login')\r\n            })\r\n\r\n        // create click event listener to hide results when user click off of results ele\r\n        document.addEventListener('click', e => {\r\n            const target = e.target\r\n\r\n            // if target isn't part of search bar/results, update state to hide search results\r\n            if (searchInputAndResultsWrapper.current && !searchInputAndResultsWrapper.current.contains(target)) {\r\n                setShowSearchResults(false)\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const handleSearchFormSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        const query = searchInput.current.value;\r\n\r\n        // update state to show loading spinner while getting results\r\n        setIsGettingSearchResults(true)\r\n        setShowSearchResults(true);\r\n\r\n        // get results from server\r\n        API.getSearchResults(query).\r\n            then(response => {\r\n                console.log(response)\r\n                // update state with search results\r\n                setSearchResults(response.data)\r\n            }).\r\n            catch(err => {\r\n                console.log(err.response)\r\n            }).\r\n            finally(() => {\r\n                setIsGettingSearchResults(false)\r\n            })\r\n    }\r\n\r\n    const handleUserIconClick = useCallback(() => {\r\n        // if user has been validated and their username is in state, send to profile page\r\n        if (loggedInUsername) {\r\n            history.push('/user/' + loggedInUsername)\r\n        } else {\r\n            // else send user to login page\r\n            history.push('/login')\r\n        }\r\n    }, [loggedInUsername])\r\n\r\n    return (\r\n        <header>\r\n            <div className='header-flex'>\r\n                <div className='flex-item-group'>\r\n                    <Link to='/' className='brand'><h1>Title</h1></Link>\r\n                </div>\r\n                <div \r\n                    className={`flex-item-group search${props.isLoginPage ? ' hide' : ''}`}\r\n                    ref={searchInputAndResultsWrapper}>\r\n                    <form ref={searchInputWrapper}\r\n                        className={`header-search-wrapper${isFocusedOnSearch ? ' focused' : ''}${showSearchResults ? ' hide-bottom-border' : ''}`}\r\n                        onSubmit={handleSearchFormSubmit}\r\n                    >\r\n                        <input ref={searchInput}\r\n                            className='search-bar'\r\n                            placeholder='search'\r\n                            aria-label='search bar'\r\n                            onFocus={() => setIsFocusedOnSearch(true)}\r\n                            onBlur={() => setIsFocusedOnSearch(false)}\r\n                        />\r\n                        <button className='search-icon-btn' aria-label='search'>\r\n                            <FontAwesomeIcon icon={faSearch} />\r\n                        </button>\r\n                    </form>\r\n                    <HeaderSearchResults\r\n                        results={searchResults}\r\n                        show={showSearchResults}\r\n                        setShow={setShowSearchResults}\r\n                        isLoading={isGettingSearchResults} />\r\n                </div>\r\n                <div className={`flex-item-group link-icons${props.isLoginPage ? ' hide' : ''}`}>\r\n                    <Link to='/search' aria-label='search' className='nav-link search'>\r\n                        <FontAwesomeIcon icon={solidSearch} />\r\n                    </Link>\r\n                    <Link to='/' aria-label='home' className='nav-link'>\r\n                        <FontAwesomeIcon icon={faHomeLgAlt} />\r\n                    </Link>\r\n                    {/* <Link to='#' aria-label='messages' className='nav-link messages'>\r\n                        <FontAwesomeIcon icon={faPaperPlane} />\r\n                    </Link> */}\r\n                    <button aria-label='profile page' className='nav-link' onClick={handleUserIconClick}>\r\n                        <FontAwesomeIcon icon={faUser} />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import axios from 'axios'\r\nimport Header from '../components/Header'\r\n\r\nconst API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || 'http://localhost:8000'\r\n// const API_ENDPOINT = 'http://localhost:8000'\r\n\r\nexport default {\r\n    updatePostLikeStatus: function(postId, userLikedPost) {\r\n        return axios.put(`${API_ENDPOINT}/api/post/status/likes`, { id: postId, userLikedPost: userLikedPost })\r\n    },\r\n    getUser: function(profilePageUsername, visitingUser) {\r\n        return axios.get(`${API_ENDPOINT}/api/user/${profilePageUsername}`, setHeaderToken())\r\n    },\r\n    getUserPosts: function(id) {\r\n        return axios.get(`${API_ENDPOINT}/api/user/${id}/posts`)\r\n    },\r\n    createUser: function(userObj) {\r\n        return axios.post(`${API_ENDPOINT}/api/user/create`, userObj)\r\n    },\r\n    userLogin: function(userObj) {\r\n        return axios.post(`${API_ENDPOINT}/api/user/login`, userObj)\r\n    },\r\n    userUpdate: function(user) {\r\n        return axios.put(`${API_ENDPOINT}/api/user/update`, user, { 'headers': { 'auth-token': localStorage.getItem('accessToken') } })\r\n    },\r\n    followUser: function(userToFollowId) {\r\n        return axios.put(`${API_ENDPOINT}/api/user/${userToFollowId}/follow`, null, setHeaderToken())\r\n    },\r\n    unfollowUser: function(userToUnfollowId) {\r\n        return axios.put(`${API_ENDPOINT}/api/user/${userToUnfollowId}/unfollow`, null, setHeaderToken())\r\n    },\r\n    getPost: function(id) {\r\n        return axios.get(`${API_ENDPOINT}/api/post/${id}`, setHeaderToken())\r\n    },\r\n    createPost: function(post) {\r\n        return axios.post(`${API_ENDPOINT}/api/post/create`, post, { 'headers': { 'auth-token': localStorage.getItem('accessToken') } })\r\n    },\r\n    deletePost: function(id) {\r\n        return axios.delete(`${API_ENDPOINT}/api/post/${id}/delete`, setHeaderToken())\r\n    },\r\n    getHomePagePosts: function() {\r\n        return axios.get(`${API_ENDPOINT}/api/posts/following`, { 'headers': { 'auth-token': localStorage.getItem('accessToken') } })\r\n    },\r\n    getSearchResults: function(query) {\r\n        return axios.get(`${API_ENDPOINT}/api/user/search/${query}`)\r\n    },\r\n    validateUserLoggedIn: async function() {\r\n        // get jwt from local storage\r\n        const token = localStorage.getItem('accessToken')\r\n\r\n        // if no token found, return false\r\n        if (!token) return false\r\n\r\n        // make request to server to validate that token is still valid\r\n        return axios.get(`${API_ENDPOINT}/api/auth/token`, { 'headers': { 'auth-token': token } })\r\n    },\r\n    uploadToCloudinary: function(img) {\r\n        return axios.post('https://api.cloudinary.com/v1_1/dka83rgpq/image/upload', { file: img, upload_preset: 'ienclaiw' })\r\n    },\r\n    uploadProfilePic: function(img) {\r\n        return axios.post('https://api.cloudinary.com/v1_1/dka83rgpq/image/upload', { file: img, upload_preset: 'social-profile' })\r\n    },\r\n    likePost: function(postId) {\r\n        return axios.put(`${API_ENDPOINT}/api/post/${postId}/like`, null, setHeaderToken())\r\n    },\r\n    unlikePost: function(postId) {\r\n        return axios.put(`${API_ENDPOINT}/api/post/${postId}/unlike`, null, setHeaderToken())\r\n    }\r\n}\r\n\r\n// function that returns obj for header in api request with jwt\r\nfunction setHeaderToken() {\r\n    // get token from storage\r\n    const token = localStorage.getItem('accessToken')\r\n\r\n    const headerObj = {\r\n        'headers': {\r\n            'auth-token': token\r\n        }\r\n    }\r\n\r\n    return headerObj\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport './index.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPaperPlane, faUser } from '@fortawesome/free-solid-svg-icons'\r\nimport { faHomeLgAlt, faSearch as solidSearch } from '@fortawesome/pro-solid-svg-icons'\r\nimport { faSearch } from '@fortawesome/pro-regular-svg-icons'\r\nimport API from '../../utils/API'\r\n\r\nexport default function Footer(props) {\r\n    let history = useHistory();\r\n\r\n    const [loggedInUsername, setLoggedInUsername] = useState(null)\r\n\r\n    useEffect(() => {\r\n        // get user info by validating their jwt in storage, which returns their username\r\n        API.validateUserLoggedIn()\r\n            .then(response => {\r\n                const username = response.data.username\r\n                setLoggedInUsername(username)\r\n            })\r\n    }, [])\r\n\r\n    const handleUserIconClick = () => {\r\n        // if user has been validated and their username is in state, send to profile page\r\n        if (loggedInUsername) {\r\n            history.push('/user/' + loggedInUsername)\r\n        } else {\r\n            // else send user to login page\r\n            history.push('/login')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <footer>\r\n            <Link to='/search' aria-label='search' className='footer-nav-link'>\r\n                <FontAwesomeIcon icon={solidSearch} />\r\n            </Link>\r\n            <Link to='/' aria-label='home' className='footer-nav-link'>\r\n                <FontAwesomeIcon icon={faHomeLgAlt} />\r\n            </Link>\r\n            <button aria-label='messages' className='footer-nav-link' onClick={handleUserIconClick}>\r\n                <FontAwesomeIcon icon={faUser} />\r\n            </button>\r\n        </footer>\r\n    )\r\n}\r\n","import React, { useState, useCallback, useEffect, useRef } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHeart as solidHeart } from '@fortawesome/free-solid-svg-icons'\r\nimport { faTrashAlt } from '@fortawesome/free-regular-svg-icons'\r\n// import { faHomeLgAlt } from '@fortawesome/pro-solid-svg-icons'\r\nimport { faHeart as lightHeart } from '@fortawesome/pro-regular-svg-icons'\r\nimport './index.css'\r\nimport API from '../../utils/API'\r\n\r\nexport default function PostCard(props) {\r\n    let history = useHistory();\r\n\r\n    const [postIsLiked, setPostIsLiked] = useState(props.post.hasLiked)\r\n    const [userIsCreator, setUserIsCreator] = useState(false)\r\n    const isUpdatingLikeStatus = useRef(false)\r\n\r\n    useEffect(() => {\r\n        // when logged in user state is updated, update state\r\n        setUserIsCreator(props.loggedInUser && props.loggedInUser.id === props.user._id)\r\n    }, [props.loggedInUser])\r\n\r\n    // update status for post being liked by user when user clicks like button\r\n    const handleLikeBtnClick = useCallback((e) => {\r\n        // if status is currently being updated on server, don't allow user to change status now\r\n        if (isUpdatingLikeStatus.current) return\r\n\r\n        // update like status in state\r\n        setPostIsLiked(!postIsLiked)\r\n        isUpdatingLikeStatus.current = true\r\n\r\n        // if user is liking a post, notify server\r\n        if (!postIsLiked) {\r\n            API.likePost(props.post._id).\r\n                then(response => {\r\n                    console.log(response)\r\n                }).\r\n                catch(err => {\r\n                    console.log(err.response)\r\n                    if (err.response && err.response.status) {\r\n                        switch (err.response.status) {\r\n                            case 500:\r\n                                // 500: error occurred with mongoose while updating\r\n                                // set like status to it's previous\r\n                                setPostIsLiked(!postIsLiked)\r\n                                break;\r\n                            case 401:\r\n                            case 403:\r\n                                // token was no longer valid, send user to login page\r\n                                alert('Your session has timed out')\r\n                                history.push('/login')\r\n                                break\r\n                        }\r\n                    }\r\n                }).\r\n                finally(() => {\r\n                    // allow user to change like status again\r\n                    isUpdatingLikeStatus.current = false\r\n                })\r\n        } else {\r\n            // else tell server to unlike the post\r\n            API.unlikePost(props.post._id).\r\n                then(response => {\r\n                    console.log(response)\r\n                }).\r\n                catch(err => {\r\n                    console.log(err.response)\r\n                    if (err.response.status) {\r\n                        switch (err.response.status) {\r\n                            case 500:\r\n                                // 500: error occurred with mongoose while updating\r\n                                // set like status to it's previous\r\n                                setPostIsLiked(!postIsLiked)\r\n                                break;\r\n                            case 401:\r\n                            case 403:\r\n                                // token was no longer valid, send user to login page\r\n                                alert(\"Your session has timed out\")\r\n                                history.push('/login')\r\n                                break\r\n                        }\r\n                    }\r\n                }).\r\n                finally(() => {\r\n                    // allow user to change like status again\r\n                    isUpdatingLikeStatus.current = false\r\n                })\r\n        }\r\n    }, [postIsLiked])\r\n\r\n    const handlePostDelete = useCallback(() => {\r\n        // tell server to delete post\r\n        API.deletePost(props.post._id).\r\n            then(response => {\r\n                // send user back to their profile page\r\n                history.push(`/user/${props.loggedInUser.username}`)\r\n            }).\r\n            catch(err => {\r\n                console.log(err.response)\r\n            })\r\n    }, [props.loggedInUser])\r\n\r\n    return (\r\n        <div className='post-card'>\r\n            <div className='user-info'>\r\n                <div className='profile-img-wrapper'>\r\n                    <img src={props.user.profilePicture || 'https://i.imgur.com/dCc7ake.png'} alt='User profile picture' />\r\n                </div>\r\n                <Link to={`/user/${props.user.username}`} className='username'>{props.user.username}</Link>\r\n                <FontAwesomeIcon \r\n                    icon={faTrashAlt} \r\n                    className={`post-delete-icon${props.isPostPage && userIsCreator ? '' : ' hide'}`}\r\n                    onClick={handlePostDelete}/>\r\n            </div>\r\n            <div className='post-content'>\r\n                <div className='post-img-wrapper'>\r\n                    <img src={props.post.img} alt='post image' />\r\n                </div>\r\n                <div className='post-details'>\r\n                    <div className='likes-wrapper'>\r\n                        <FontAwesomeIcon\r\n                            icon={postIsLiked ? solidHeart : lightHeart}\r\n                            className={`heart-icon${postIsLiked ? ' liked' : ''}`}\r\n                            onClick={() => handleLikeBtnClick(props.post.id)}\r\n                        />\r\n                        <p className='likes-number'>{props.post.likes}</p>\r\n                    </div>\r\n                    <div className='caption-wrapper'>\r\n                        {props.post.caption}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Footer from '../../components/Footer'\r\nimport Header from '../../components/Header'\r\nimport PostCard from '../../components/PostCard'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\n\r\nexport default function Home() {\r\n    let history = useHistory();\r\n\r\n    const [posts, setPosts] = useState([])\r\n\r\n    useEffect(() => {\r\n        // get all recent posts of people the user followers\r\n        API.getHomePagePosts()\r\n            .then(response => {\r\n                // iterate over array of posts\r\n                for (let post of response.data.posts) {\r\n                    // if user has liked the post, set hasLiked to true\r\n                    if (post.likedBy.includes(response.data.user.id)) {\r\n                        post.hasLiked = true\r\n                    } else {\r\n                        // set hasLiked to false\r\n                        post.hasLiked = false\r\n                    }\r\n                }\r\n                // set array of posts to state\r\n                setPosts(response.data.posts)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <div className='home-page-wrapper'>\r\n            <Header />\r\n            <div className='content-header-footer-offset'>\r\n                <div className='content-main-responsive'>\r\n                    {posts.map(post => {\r\n                        return (\r\n                            <PostCard\r\n                                user={post.creator}\r\n                                post={post} />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useCallback } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSpinnerThird } from '@fortawesome/pro-regular-svg-icons'\r\nimport './index.css'\r\nimport API from '../../utils/API';\r\nimport Header from '../../components/Header'\r\n\r\nexport default function Login() {\r\n    let history = useHistory();\r\n\r\n    // state controls which form to display\r\n    const [isLoggingIn, setIsLogginIn] = useState(false);\r\n\r\n    const [loadingLogin, setLoadingLogin] = useState(false);\r\n    const [loadingSignUp, setLoadingSignUp] = useState(false)\r\n\r\n    const [loginHelperText, setLoginHelperText] = useState('')\r\n    const [signUpHelperText, setSignUpHelperText] = useState('')\r\n\r\n    const [loginInputValues, setLoginInputValues] = useState({\r\n        email: {\r\n            value: '',\r\n            helperText: 'Please enter an email'\r\n        },\r\n        password: {\r\n            value: '',\r\n            helperText: \"Please enter a password\"\r\n        }\r\n    })\r\n\r\n    const [signUpInputValues, setSignUpInputValues] = useState({\r\n        email: {\r\n            value: '',\r\n            helperText: 'Please enter an email'\r\n        },\r\n        username: {\r\n            value: '',\r\n            helperText: 'Please enter a username'\r\n        },\r\n        name: {\r\n            value: '',\r\n            helperText: 'Please enter your name'\r\n        },\r\n        password: {\r\n            value: '',\r\n            helperText: 'Please enter a password'\r\n        },\r\n        passwordReEnter: {\r\n            value: '',\r\n            helperText: \"Please re-enter your password\"\r\n        }\r\n    })\r\n\r\n    const toggleFormToDisplay = () => {\r\n        // update state to opposite boolean\r\n        setIsLogginIn(!isLoggingIn)\r\n    }\r\n\r\n    const handleLoginInputChange = e => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n        // update state with new value\r\n        setLoginInputValues({ ...loginInputValues, [name]: { ...loginInputValues[name], value: value } })\r\n    }\r\n\r\n    const handleSignupInputChange = e => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n\r\n        // update state with new input value\r\n        setSignUpInputValues({ ...signUpInputValues, [name]: { ...signUpInputValues[name], value: value } })\r\n    }\r\n\r\n    const handleLoginAttempt = useCallback(e => {\r\n        e.preventDefault();\r\n        // remove any helper text from state\r\n        setLoginHelperText('')\r\n\r\n        // if a field is blank, tell user to fill out field before loggin in\r\n        const allInputsFilled = checkForEmptyField({ ...loginInputValues }, setLoginHelperText)\r\n        if (!allInputsFilled) return\r\n\r\n        const userObj = {\r\n            email: loginInputValues.email.value,\r\n            password: loginInputValues.password.value\r\n        }\r\n\r\n        API.userLogin(userObj)\r\n            .then(response => {\r\n                // get access token (jwt) and user id from response\r\n                const userId = response.data.id\r\n                const username = response.data.username\r\n                const token = response.headers['auth-token']\r\n                // store token in storage\r\n                localStorage.setItem('accessToken', token);\r\n\r\n                // redirect user to their profile page\r\n                history.push(`/user/${username}`)\r\n            })\r\n            .catch(err => {\r\n                switch (err.response.status) {\r\n                    case 401:\r\n                        // 401 for incorrect email or password\r\n                        setLoginHelperText(\"Incorrect email or password\")\r\n                        break\r\n                }\r\n            })\r\n            .finally(() => {\r\n                setLoadingLogin(false)\r\n            })\r\n    }, [loginInputValues])\r\n\r\n    const handleSignUpAttempt = useCallback((e) => {\r\n        setSignUpHelperText('')\r\n\r\n        e.preventDefault();\r\n        // if a field is blank, tell user to fill out field before registering\r\n        const allInputsFilled = checkForEmptyField({ ...signUpInputValues }, setSignUpHelperText)\r\n        if (!allInputsFilled) return\r\n\r\n        // check if password and re-entered password match\r\n        if (signUpInputValues.password.value !== signUpInputValues.passwordReEnter.value) {\r\n            setSignUpHelperText(\"Passwords must match\")\r\n            return\r\n        }\r\n\r\n        const userObj = {\r\n            email: signUpInputValues.email.value,\r\n            username: signUpInputValues.username.value,\r\n            name: signUpInputValues.name.value,\r\n            password: signUpInputValues.password.value\r\n        }\r\n\r\n        API.createUser(userObj)\r\n            .then(response => {\r\n                // get access token (jwt) and user id from response\r\n                const username = response.data.username\r\n                const token = response.headers['auth-token']\r\n\r\n                // store token in storage\r\n                localStorage.setItem('accessToken', token);\r\n                // redirect user to their profile page\r\n                history.push(`/user/${username}`)\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response)\r\n                if (err.response && err.response.status) {\r\n                    switch (err.response.status) {\r\n                        case 409:\r\n                            // 409 for email taken\r\n                            setSignUpHelperText('Email taken')\r\n                            break;\r\n                        case 422:\r\n                            // 422 for username taken\r\n                            setSignUpHelperText(\"Username taken\")\r\n                            break;\r\n                    }\r\n                }\r\n            })\r\n            .finally(() => {\r\n                setLoadingSignUp(false)\r\n            })\r\n    }, [signUpInputValues])\r\n\r\n    // functiont to make sure all input fields are filled out\r\n    const checkForEmptyField = (inputsObj, setHelperTextFunc) => {\r\n        // create array of all keys in state object\r\n        const inputNames = Object.keys(inputsObj)\r\n        for (let i = 0; i < inputNames.length; i++) {\r\n            const inputName = inputNames[i]\r\n            const inputValue = inputsObj[inputName].value\r\n            const inputHelperText = inputsObj[inputName].helperText\r\n            // check if obj property is blank and update helper text if blank, then return\r\n            if (!inputValue) {\r\n                setHelperTextFunc(inputHelperText)\r\n                return false\r\n            }\r\n        }\r\n\r\n        // if all fields filled out, return true\r\n        return true\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header isLoginPage={true} />\r\n            <div>\r\n                <div className='login-page-forms-wrapper'>\r\n                    <form className={`login-page-form${isLoggingIn ? '' : ' hide'}`} onSubmit={handleLoginAttempt}>\r\n                        <h2>Login</h2>\r\n                        <div className={`helper-wrapper${loginHelperText ? '' : ' hide'}`}>\r\n                            {loginHelperText}\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <input className='dark-input' id='loginEmailInput' type='email' onChange={handleLoginInputChange} name='email' value={loginInputValues.email.value} placeholder='Email' aria-label='email' />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <input className='dark-input' id='loginPasswordInput' type='password' onChange={handleLoginInputChange} name='password' value={loginInputValues.password.value} placeholder='Password' aria-label='password' />\r\n                        </div>\r\n                        <div className='submit-btn-wrapper'>\r\n                            <button className='blue-btn'>Login <span><FontAwesomeIcon icon={faSpinnerThird} className={`btn-load-spinner${loadingLogin ? '' : ' hide'}`} /></span></button>\r\n                        </div>\r\n                        <p className='login-display-change-text'>Don't have an account? <span onClick={toggleFormToDisplay}>Create an account</span></p>\r\n                    </form>\r\n                    <form className={`login-page-form${isLoggingIn ? ' hide' : ''}`} onSubmit={handleSignUpAttempt}>\r\n                        <h2>Register</h2>\r\n                        <div className={`helper-wrapper${signUpHelperText ? '' : ' hide'}`}>\r\n                            {signUpHelperText}\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <input className='dark-input' id='registerEmailInput' type='email' onChange={handleSignupInputChange} name='email' value={signUpInputValues.email.value} placeholder='Email' aria-label='email' />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <input className='dark-input' id='registerUsernameInput' type='text' onChange={handleSignupInputChange} name='username' value={signUpInputValues.username.value} placeholder='Username' aria-label='username' />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <input className='dark-input' id='registerFullNameInput' type='text' onChange={handleSignupInputChange} name='name' value={signUpInputValues.name.value} placeholder='Full Name' aria-label='full name' />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <input className='dark-input' id='registerPasswordInput' type='password' onChange={handleSignupInputChange} name='password' value={signUpInputValues.password.value} placeholder='Password' aria-label='password' />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <input className='dark-input' id='registerPasswordReEnterInput' type='password' onChange={handleSignupInputChange} name='passwordReEnter' value={signUpInputValues.passwordReEnter.value} placeholder='Re-Enter Password' aria-label='re-enter password' />\r\n                        </div>\r\n                        <div className='submit-btn-wrapper'>\r\n                            <button className='blue-btn'>Register <span><FontAwesomeIcon icon={faSpinnerThird} className={`btn-load-spinner${loadingSignUp ? '' : ' hide'}`} /></span></button>\r\n                        </div>\r\n                        <p className='login-display-change-text'>Already have an account? <span onClick={toggleFormToDisplay}>Log in</span></p>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useRef, useEffect, useCallback } from 'react'\r\nimport API from '../../utils/API'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSpinnerThird } from '@fortawesome/pro-regular-svg-icons'\r\nimport './index.css'\r\nimport { useHistory } from 'react-router-dom'\r\n// import { Image, Video, Transformation, CloudinaryContext } from 'cloudinary-react'\r\n// import { WidgetLoader, Widget } from 'react-cloudinary-upload-widget'\r\n\r\nexport default function NewPostModal(props) {\r\n    let history = useHistory();\r\n\r\n    const imageUploadSvg = useRef();\r\n\r\n    const [isPosting, setIsPosting] = useState(false)\r\n\r\n    const [helperText, setHelperText] = useState('')\r\n\r\n    const [imgToPost, setImgToPost] = useState('')\r\n    const captionTextarea = useRef()\r\n    const [captionCount, setCaptionCount] = useState(0)\r\n\r\n    const fileInput = useRef()\r\n\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n\r\n    // handler when user selects a new image for upload\r\n    const handleImageChange = (e) => {\r\n        // get location of image on user's computer\r\n        const selectedFile = e.target.files[0]\r\n        // create reader to read img file\r\n        const reader = new FileReader();\r\n\r\n        // when file is ready, update state with new img\r\n        reader.onload = (event) => setImgToPost(event.target.result)\r\n\r\n        // read image\r\n        reader.readAsDataURL(selectedFile)\r\n    }\r\n\r\n    const handlePostBtnClick = useCallback(() => {\r\n        console.log('starting upload')\r\n        // remove any helper text\r\n        setHelperText('')\r\n        // if user has not chosen an img yet, alert with helper text\r\n        if (!imgToPost) {\r\n            return setHelperText('Please choose an image to post')\r\n        }\r\n\r\n        // upload image to cloudinary\r\n        API.uploadToCloudinary(imgToPost)\r\n            .then(response => {\r\n                console.log(response)\r\n                // make request to server to add post to db\r\n                API.createPost({ img: response.data.url, caption: captionTextarea.current.value })\r\n                    .then(response => {\r\n                        // refresh page to load in new post\r\n                        history.go(0)\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err)\r\n                    })\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response)\r\n            })\r\n\r\n    }, [imgToPost])\r\n\r\n    const hideModal = () => {\r\n        props.setShow(false)\r\n        // show search bar in header\r\n        const searchbar = document.querySelector('.header-search-wrapper')\r\n        searchbar.style.opacity = 1\r\n    }\r\n\r\n    const updateCaptionCharCount = useCallback(() => {\r\n        // set length of caption text in state\r\n        const captionText = captionTextarea.current.value\r\n        setCaptionCount(captionText.length)\r\n    }, [captionCount])\r\n\r\n    return (\r\n        <>\r\n            {/* <WidgetLoader /> */}\r\n            <div className={`new-post-modal-wrapper-outer${props.show ? '' : ' hide'}`}>\r\n                <div className='new-post-modal-wrapper-inner'>\r\n                    <h2>New Post</h2>\r\n                    <button className='exit-btn' onClick={hideModal} disabled={isPosting}><span>&times;</span></button>\r\n                    <div className={`helper-wrapper${!helperText ? ' hide' : ''}`}>\r\n                        {helperText}\r\n                    </div>\r\n                    <div className='img-aspect-ratio-wrapper'>\r\n                        <div className='img-wrapper'>\r\n                            {/* show img if there is one, else show svg graphic to add image */}\r\n                            {imgToPost ?\r\n                                <>\r\n                                    <img src={imgToPost} alt='Image to post' />\r\n                                    <div className='btn-wrapper'>\r\n                                        <button className='dark-btn' onClick={() => fileInput.current.click()}>Change Image</button>\r\n                                    </div>\r\n                                </> :\r\n                                <>\r\n                                    <h3 onClick={() => fileInput.current.click()}>Upload Image</h3>\r\n                                    <svg onClick={() => fileInput.current.click()} ref={imageUploadSvg} id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 97.75 48.75\"><defs></defs><rect className=\"cls-1\" x=\"0.38\" y=\"0.38\" width=\"97\" height=\"48\" rx=\"3.89\" /></svg>\r\n                                </>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className='caption-wrapper'>\r\n                        <textarea ref={captionTextarea} placeholder='Caption' maxLength='300' onChange={updateCaptionCharCount}></textarea>\r\n                        <small className='text-count'>{captionCount}/300</small>\r\n                    </div>\r\n                    <div className='post-btn-wrapper'>\r\n                        <button className='blue-btn create-post-btn' onClick={handlePostBtnClick} disabled={isPosting}>\r\n                            Post <span><FontAwesomeIcon icon={faSpinnerThird} className={`btn-load-spinner${isPosting ? '' : ' hide'}`} /></span>\r\n                        </button>\r\n                    </div>\r\n                    {/* <Image cloudName='dka83rgpq' width='700' height='393' /> */}\r\n                    {/* <Widget\r\n                    cloudName='dka83rgpq'\r\n                    uploadPreset='preset1'\r\n                    eager='w_700,h_400'\r\n                    buttonText={'Open'}\r\n                    folder='social-media-app'\r\n                    onFailure={() => alert('error')} /> */}\r\n                </div>\r\n                {/* this is a hidden input that will be activated through JS to get image from user's computer */}\r\n                <input ref={fileInput} onChange={handleImageChange} className='hide' type='file' />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { faGameConsoleHandheld } from '@fortawesome/pro-solid-svg-icons'\r\nimport React, { useState, useEffect, useCallback } from 'react'\r\nimport { useHistory, useParams, Link } from 'react-router-dom'\r\nimport Footer from '../../components/Footer'\r\nimport Header from '../../components/Header'\r\nimport NewPostModal from '../../components/NewPostModal'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\n\r\nexport default function Profilepage() {\r\n    let history = useHistory()\r\n\r\n    let { username: profilePageUsername } = useParams()\r\n\r\n    const [user, setUser] = useState({\r\n        username: '',\r\n        name: '',\r\n        profileImg: '',\r\n        bio: '',\r\n        followersCount: 0,\r\n        followingCount: 0\r\n    })\r\n\r\n    const [posts, setPosts] = useState([])\r\n\r\n    const [currentUserIsSameAsProfile, setCurrentUserIsSameAsProfile] = useState(false)\r\n    const [isFollowingUser, setIsFollowingUser] = useState(false)\r\n\r\n    const [showNewPostModal, setShowNewPostModal] = useState(false)\r\n    const [showViewPostModal, setViewPostModal] = useState(false)\r\n\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n\r\n    const followUser = useCallback(() => {\r\n        console.log(user.id)\r\n        API.followUser(user.id).\r\n            then(response => {\r\n                console.log(response)\r\n            }).\r\n            catch(err => {\r\n                console.log(err.response)\r\n            })\r\n    }, [user.id])\r\n\r\n    const unfollowUser = useCallback(() => {\r\n        console.log(user.id)\r\n        API.unfollowUser(user.id).\r\n            then(response => {\r\n                console.log(response)\r\n            }).\r\n            catch(err => {\r\n                console.log(err.response)\r\n            })\r\n    }, [user.id])\r\n\r\n    // function to handle info from server if user is logged in\r\n    const handleTokenInfo = data => {\r\n        const { username } = data\r\n\r\n        // first make request to server for info of profile page user\r\n        API.getUser(profilePageUsername, username)\r\n            .then(response => {\r\n                const userObj = response.data\r\n                console.log('userobj', userObj)\r\n\r\n                // update state with user info\r\n                setIsFollowingUser(userObj.isFollowing || false)\r\n\r\n                // remove 'isFollowing' prop from obj\r\n                if (userObj.isFollowing) delete userObj.isFollowing\r\n\r\n                setUser(userObj)\r\n\r\n                // now that we have the user's id, get all the posts by that user\r\n                API.getUserPosts(userObj.id)\r\n                    .then(response => {\r\n                        // add posts array to state\r\n                        setPosts(response.data)\r\n                    })\r\n            })\r\n            .catch(err => {\r\n                // if any error shows up, redirect back to home page\r\n                history.push('/')\r\n            })\r\n\r\n        // check if logged in user's username matches username of current profile page\r\n        if (username === profilePageUsername) {\r\n            // update state\r\n            setCurrentUserIsSameAsProfile(true)\r\n        } else {\r\n            // else user is looking at another user's profile page\r\n        }\r\n    }\r\n\r\n    // function to determine if a post thumbnail will show up in the 1st, 2nd, or 3rd column of displayed post thumbnails\r\n    const getColOfThumbnail = number => {\r\n        // if user is viewing their own profile page, a 'new-post' will show up in first slot\r\n        // increase index by 1 to account for this\r\n        if (currentUserIsSameAsProfile) {\r\n            number++\r\n        }\r\n\r\n        // if number passed is divisible by 3, that post is in the third column\r\n        if (number % 3 === 0) return 3\r\n        // if number - 2 is divisible by 3, that post is in the 2nd column\r\n        if ((number - 2) % 3 === 0) return 2\r\n        // if number - 1 is divisible by 3, that post is in the 1st column\r\n        if ((number - 1) % 3 === 0) return 1\r\n    }\r\n\r\n    const handleNewPostBtnClick = () => {\r\n        // bring up modal for creating a new post\r\n        setShowNewPostModal(true)\r\n        // hide search bar in header\r\n        const searchbar = document.querySelector('.header-search-wrapper')\r\n        searchbar.style.opacity = 0\r\n    }\r\n\r\n    const logout = () => {\r\n        // remove token from local storage\r\n        localStorage.removeItem('accessToken')\r\n\r\n        // send user to login page\r\n        history.push('/login')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <NewPostModal setShow={setShowNewPostModal} show={showNewPostModal} />\r\n            <Header handleTokenInfo={handleTokenInfo} />\r\n            <div className='content-header-footer-offset'>\r\n                <div className='content-main-responsive'>\r\n                    <div className='profile-info-wrapper'>\r\n                        <h1>{user.username}</h1>\r\n                        <div className='row top'>\r\n                            <div className='flex-group left'>\r\n                                <div className='profile-img-wrapper'>\r\n                                    <img src={user.profileImg || 'https://i.imgur.com/dCc7ake.png'} alt='user profile picture' />\r\n                                </div>\r\n                            </div>\r\n                            <div className='flex-group right'>\r\n                                <div className='follows-wrapper'>\r\n                                    <div className='followers'>\r\n                                        <p className='followers-count'>{user.followersCount}</p>\r\n                                        <p>Followers</p>\r\n                                    </div>\r\n                                    <div className='following'>\r\n                                        <p className='following-count'>{user.followingCount}</p>\r\n                                        <p>Following</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='profile-option-btns-wrapper'>\r\n                                    {currentUserIsSameAsProfile ? <>\r\n                                        <button className='blue-btn' onClick={() => history.push(`/user/edit/${user.username}`)}>Edit Profile</button>\r\n                                        <button className='blue-btn' onClick={logout}>Logout</button></> :\r\n                                        isFollowingUser ?\r\n                                            <button className='blue-btn' onClick={unfollowUser}>Unfollow</button> :\r\n                                            <button className='blue-btn' onClick={followUser}>Follow</button>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='row bottom'>\r\n                            <div className='user-name-wrapper'>\r\n                                {user.name}\r\n                            </div>\r\n                            <div className='profile-option-btns-wrapper mobile'>\r\n                                {currentUserIsSameAsProfile ? <>\r\n                                    <button className='blue-btn' onClick={() => history.push(`/user/edit/${user.username}`)}>Edit Profile</button>\r\n                                    <button className='blue-btn' onClick={logout}>Logout</button></> :\r\n                                    isFollowingUser ?\r\n                                        <button className='blue-btn' onClick={unfollowUser}>Unfollow</button> :\r\n                                        <button className='blue-btn' onClick={followUser}>Follow</button>\r\n                                }\r\n                            </div>\r\n                            <p className='profile-bio'>{user.bio || ''}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className='profile-posts-wrapper'>\r\n                        {/* if user is viewing their own profile page and they have atleast one post, make the first post a button to create a new post */}\r\n                        {currentUserIsSameAsProfile && posts.length > 0 ?\r\n                            <div className='profile-post-thumb new-post-btn' onClick={handleNewPostBtnClick}>\r\n                                <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 62.75 62.75\"><defs><style></style></defs><circle class=\"cls-1\" cx=\"31.38\" cy=\"31.38\" r=\"31\" /><line className=\"cls-2\" x1=\"31.38\" y1=\"20.38\" x2=\"31.38\" y2=\"42.37\" /><line className=\"cls-2\" x1=\"42.37\" y1=\"31.38\" x2=\"20.38\" y2=\"31.38\" /></svg>\r\n                            </div> : currentUserIsSameAsProfile ?\r\n                                // else if user is viewing their own page but has no posts, display btn to create first post\r\n                                <button\r\n                                    className='first-post-btn dark-btn'\r\n                                    onClick={handleNewPostBtnClick}>\r\n                                    Create Your First Post\r\n                                </button> :\r\n                                // else user is viewing another's page but user has no posts\r\n                                <div className='no-posts-display'>\r\n                                    User has not posted yet\r\n                                </div>}\r\n                        {posts.map((post, index) => {\r\n                            // get column that thumbnail will show up in (add 1 to index to start counting at 1)\r\n                            const col = getColOfThumbnail(index + 1)\r\n                            return (\r\n                                <div\r\n                                    className={`profile-post-thumb${col === 1 ? ' first-col' : ''}${col === 3 ? ' third-col' : ''}`}\r\n                                    onClick={() => history.push(`/post/${post._id}`)}>\r\n                                    <img src={post.img} alt='thumbnail of post' />\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState, useRef, useCallback } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSpinnerThird } from '@fortawesome/pro-regular-svg-icons'\r\nimport Footer from '../../components/Footer'\r\nimport Header from '../../components/Header'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\n\r\nexport default function EditProfile() {\r\n    let history = useHistory();\r\n\r\n    const { username } = useParams()\r\n\r\n    const fileInputEle = useRef()\r\n\r\n    const [helperText, setHelperText] = useState('')\r\n\r\n    const [displayUsername, setDisplayUsername] = useState('')\r\n\r\n    const [user, setUser] = useState({\r\n        email: '',\r\n        username: '',\r\n        name: '',\r\n        bio: '',\r\n        profilePicture: ''\r\n    })\r\n\r\n    const userHasChangedProfilePic = useRef(false)\r\n\r\n    const [isUpdating, setIsUpdating] = useState(false)\r\n\r\n    useEffect(() => {\r\n        console.log(username)\r\n        // on load, get user data from database\r\n        API.getUser(username).\r\n            then(response => {\r\n                console.log(response.data)\r\n                // update state with new data\r\n                setUser({ ...response.data, profilePicture: response.data.profileImg })\r\n                setDisplayUsername(response.data.username)\r\n            })\r\n    }, [])\r\n\r\n    const handleInputChange = e => {\r\n        // get name and value of input changed\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n\r\n        // update state with new value\r\n        setUser({ ...user, [name]: value })\r\n    }\r\n\r\n    const handleChangeImgBtnClick = e => {\r\n        e.preventDefault();\r\n\r\n        // click file input element\r\n        fileInputEle.current.click();\r\n    }\r\n\r\n    const handleImgChange = e => {\r\n        // get location of image on user's computer\r\n        const selectedFile = e.target.files[0]\r\n        // create reader to read img file\r\n        const reader = new FileReader();\r\n\r\n        // when file is ready, update state with new img\r\n        reader.onload = (event) => setUser({ ...user, profilePicture: event.target.result })\r\n\r\n        // read image\r\n        reader.readAsDataURL(selectedFile)\r\n\r\n        // update ref to show user has changed their profile picture\r\n        userHasChangedProfilePic.current = true\r\n    }\r\n\r\n    const handleFormSubmit = useCallback(e => {\r\n        e.preventDefault();\r\n\r\n        // if no email is provided, tell user to add a valid email\r\n        if (!user.email) {\r\n            return setHelperText('Email can not be blank')\r\n        }\r\n        // if no username is provided, tell user to add a valid username\r\n        if (!user.username) {\r\n            return setHelperText(\"Username can not be blank\")\r\n        }\r\n\r\n        setIsUpdating(true)\r\n\r\n        // if user has updated their profile pic, upload the new image to cloudinary\r\n        if (userHasChangedProfilePic.current) {\r\n            // upload image to cloudinary\r\n            API.uploadProfilePic(user.profilePicture).\r\n                then(response => {\r\n                    console.log(response.data)\r\n                    // send user data to db\r\n                    updateUserDB(response.data.url)\r\n                }).\r\n                catch(err => {\r\n                    console.log(err.response)\r\n                    alert(\"An error occurred while uploading profile picture\")\r\n                    setIsUpdating(false)\r\n                })\r\n        } else {\r\n            // else user didn't change their profile pic\r\n            updateUserDB(null)\r\n        }\r\n    }, [user])\r\n\r\n    // function to make API request to update user data in DB\r\n    const updateUserDB = (img) => {\r\n        // send user info to server\r\n        API.userUpdate({ ...user, profilePicture: img || user.profilePicture }).\r\n            then(response => {\r\n                console.log(response.data)\r\n                // store new token in local storage\r\n                localStorage.setItem('accessToken', response.headers['auth-token'])\r\n                // send user to their profile page\r\n                history.push(`/user/${response.data.username}`)\r\n            }).\r\n            catch(err => {\r\n                console.log(err.response)\r\n                if (err.response.status) {\r\n                    switch (err.response.status) {\r\n                        case 409:\r\n                            // 409: email taken\r\n                            setHelperText('Email Taken')\r\n                            break;\r\n                        case 422:\r\n                            // 422: username taken\r\n                            setHelperText(\"Username Taken\")\r\n                            break;\r\n                        case 401:\r\n                        case 403:\r\n                            // 401 || 403 : invalid token\r\n                            history.push('/login')\r\n                            break;\r\n                    }\r\n                }\r\n            }).\r\n            finally(() => {\r\n                setIsUpdating(false)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className='content-header-footer-offset edit-profile-content-wrapper'>\r\n                <h1>{displayUsername}</h1>\r\n                <form className='edit-profile-form'>\r\n                    <div className={`helper-wrapper${helperText ? '' : ' hide'}`}>\r\n                        {helperText}\r\n                    </div>\r\n                    <div className='profile-pic'>\r\n                        <div className='img-wrapper'>\r\n                            <img src={user.profilePicture || 'https://i.imgur.com/dCc7ake.png'} alt='profile picture' />\r\n                        </div>\r\n                        <button \r\n                            className='dark-btn' \r\n                            onClick={handleChangeImgBtnClick}\r\n                            disabled={isUpdating}>Change Image</button>\r\n                        {/* hidden input for getting image from computer */}\r\n                        <input ref={fileInputEle} className='hide' type='file' onChange={handleImgChange} />\r\n                    </div>\r\n                    <label for='edit-profile-username'>Username</label>\r\n                    <input\r\n                        className='dark-input'\r\n                        id='edit-profile-username'\r\n                        type='text'\r\n                        placeholder='Username'\r\n                        name='username'\r\n                        value={user.username}\r\n                        onChange={handleInputChange} />\r\n                    <label for='edit-profile-name'>Name</label>\r\n                    <input\r\n                        id='edit-profile-name'\r\n                        className='dark-input'\r\n                        type='text'\r\n                        placeholder='Name'\r\n                        name='name'\r\n                        value={user.name}\r\n                        onChange={handleInputChange} />\r\n                    <label for='edit-profile-email'>Email</label>\r\n                    <input\r\n                        className='dark-input'\r\n                        id='edit-profile-email'\r\n                        type='email'\r\n                        placeholder='Email'\r\n                        name='email'\r\n                        value={user.email}\r\n                        onChange={handleInputChange} />\r\n                    <label for='edit-profile-bio'>Bio</label>\r\n                    <textarea \r\n                        id='edit-profile-bio'\r\n                        className='dark-input'\r\n                        name='bio'\r\n                        value={user.bio}\r\n                        placeholder='Bio'\r\n                        maxLength='300'\r\n                        onChange={handleInputChange}></textarea>\r\n                    <small>{user.bio ? user.bio.length : 0}/300</small>\r\n                    <div className='btn-wrapper'>\r\n                        <button\r\n                            className='blue-btn'\r\n                            onClick={handleFormSubmit}\r\n                            disabled={isUpdating}>\r\n                            Save Changes <FontAwesomeIcon \r\n                                            icon={faSpinnerThird} \r\n                                            className={`btn-load-spinner${isUpdating ? '' : ' hide'}`}/>\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport Footer from '../../components/Footer'\r\nimport Header from '../../components/Header'\r\nimport PostCard from '../../components/PostCard'\r\nimport API from '../../utils/API'\r\n\r\nexport default function Post() {\r\n    let history = useHistory();\r\n    let { id: postId } = useParams()\r\n\r\n    const [post, setPost] = useState(null)\r\n    const [loggedInUser, setLoggedInUser] = useState(null)\r\n\r\n    useEffect(() => {\r\n        // get post data from db\r\n        API.getPost(postId).\r\n            then(response => {\r\n                const post = response.data.post\r\n                const user = response.data.user\r\n                console.log(response)\r\n                // determine whether or not user has liked the post\r\n                if (post.likedBy.includes(user.id)) {\r\n                    console.log('has liked')\r\n                    // user has liked this post\r\n                    post.hasLiked = true\r\n                } else {\r\n                    console.log('has not liked')\r\n                    // else user has not liked this post\r\n                    post.hasLiked = false\r\n                }\r\n\r\n                // update state with new post\r\n                setPost(post)\r\n                setLoggedInUser(user)\r\n            }).\r\n            catch(err => {\r\n                console.log(err.response)\r\n                if (err.response.status) {\r\n                    switch (err.response.status) {\r\n                        case 401:\r\n                        case 403:\r\n                            // user's token is no longer valid, redirect to login\r\n                            alert('Session has timed out')\r\n                            history.push('/login')\r\n                            break;\r\n                    }\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className='content-header-footer-offset'>\r\n                <div className='content-main-responsive'>\r\n                    {post ?\r\n                        <PostCard \r\n                            post={post} \r\n                            user={post.creator} \r\n                            loggedInUser={loggedInUser}\r\n                            isPostPage={true}/> :\r\n                        ''}\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useCallback } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Footer from '../../components/Footer'\r\nimport Header from '../../components/Header'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch, faSpinnerThird } from '@fortawesome/pro-solid-svg-icons'\r\nimport './index.css'\r\nimport API from '../../utils/API'\r\n\r\nexport default function Search() {\r\n    let history = useHistory();\r\n\r\n    const [query, setQuery] = useState();\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [results, setResults] = useState(null)\r\n\r\n    const handleInputChange = e => {\r\n        // update state with new query from input element\r\n        const value = e.target.value\r\n        setQuery(value)\r\n    }\r\n\r\n    const search = useCallback((e) => {\r\n        e.preventDefault();\r\n        setIsLoading(true)\r\n\r\n        // send search query to server to search for users\r\n        API.getSearchResults(query).\r\n            then(response => {\r\n                // update state with new users\r\n                setResults(response.data)\r\n                console.log(response.data)\r\n            }).\r\n            catch(err => {\r\n                console.log(err.response)\r\n            }).\r\n            finally(() => {\r\n                setIsLoading(false)\r\n            })\r\n    }, [query])\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className='content-header-footer-offset'>\r\n                <div className='content-main-responsive search-page'>\r\n                    <form className='search-form' onSubmit={search}>\r\n                        <input\r\n                            className='dark-input'\r\n                            type='text'\r\n                            name='user'\r\n                            placeholder='Search'\r\n                            value={query}\r\n                            onChange={handleInputChange} />\r\n                        <FontAwesomeIcon\r\n                            icon={faSearch}\r\n                            className='search-icon'\r\n                            onClick={search} />\r\n                    </form>\r\n                    <div className='results'>\r\n                        {results ?\r\n                            results.map(user => {\r\n                                return (\r\n                                    <div className='user'>\r\n                                        <div \r\n                                            className='profile-img'\r\n                                            onClick={() => history.push(`/user/${user.username}`)}>\r\n                                            <img \r\n                                                src={user.profilePicture || 'https://i.imgur.com/dCc7ake.png'}\r\n                                                alt='profile picture' />\r\n                                        </div>\r\n                                        <p \r\n                                            className='username'\r\n                                            onClick={() => history.push(`/user/${user.username}`)}>{user.username}</p>\r\n                                    </div>\r\n                                )\r\n                            }) : isLoading ?\r\n                                <FontAwesomeIcon\r\n                                    icon={faSpinnerThird}\r\n                                    className='results-spinner' /> : ''}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport Home from './pages/Home';\r\nimport Header from './components/Header';\r\nimport Login from './pages/Login';\r\nimport Profilepage from './pages/ProfilePage';\r\nimport EditProfile from './pages/EditProfile';\r\nimport Post from './pages/Post';\r\nimport Search from './pages/Search';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path='/'>\r\n            <Home />\r\n          </Route>\r\n          <Route exact path='/login'>\r\n            <Login />\r\n          </Route>\r\n          <Route exact path='/user/:username'>\r\n            <Profilepage />\r\n          </Route>\r\n          <Route exact path='/user/edit/:username'>\r\n            <EditProfile />\r\n          </Route>\r\n          <Route exact path='/post/:id'>\r\n            <Post />\r\n          </Route>\r\n          <Route exact path='/search'>\r\n            <Search />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}